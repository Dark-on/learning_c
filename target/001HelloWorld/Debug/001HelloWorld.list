
001HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  08002714  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002714  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000501a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000126f  00000000  00000000  000250ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  00026330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00026910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e92  00000000  00000000  00026e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f05  00000000  00000000  00040cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ec8  00000000  00000000  00046bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d4c  00000000  00000000  000e7af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800259c 	.word	0x0800259c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800259c 	.word	0x0800259c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
void SystemClock_Config(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
 {
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
	 }
	 return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
 }
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:

int i = 0;

int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 f97a 	bl	80005f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f810 	bl	8000324 <SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("%d Hello World\n", ++i);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <main+0x24>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <main+0x24>)
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	4b03      	ldr	r3, [pc, #12]	; (800031c <main+0x24>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4619      	mov	r1, r3
 8000314:	4802      	ldr	r0, [pc, #8]	; (8000320 <main+0x28>)
 8000316:	f001 f9b3 	bl	8001680 <iprintf>
 800031a:	e7f3      	b.n	8000304 <main+0xc>
 800031c:	2000008c 	.word	0x2000008c
 8000320:	080025b4 	.word	0x080025b4

08000324 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b096      	sub	sp, #88	; 0x58
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	2244      	movs	r2, #68	; 0x44
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f99c 	bl	8001670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	463b      	mov	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000346:	f44f 7000 	mov.w	r0, #512	; 0x200
 800034a:	f000 fac3 	bl	80008d4 <HAL_PWREx_ControlVoltageScaling>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000354:	f000 f836 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000358:	2310      	movs	r3, #16
 800035a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000364:	2360      	movs	r3, #96	; 0x60
 8000366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800036c:	2301      	movs	r3, #1
 800036e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000370:	2301      	movs	r3, #1
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000374:	2328      	movs	r3, #40	; 0x28
 8000376:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000378:	2302      	movs	r3, #2
 800037a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037c:	2302      	movs	r3, #2
 800037e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fafb 	bl	8000980 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000390:	f000 f818 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2303      	movs	r3, #3
 800039a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	2104      	movs	r1, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 ff49 	bl	8001244 <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003b8:	f000 f804 	bl	80003c4 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3758      	adds	r7, #88	; 0x58
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x44>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6613      	str	r3, [r2, #96]	; 0x60
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x44>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <HAL_MspInit+0x44>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <HAL_MspInit+0x44>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	6593      	str	r3, [r2, #88]	; 0x58
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_MspInit+0x44>)
 80003fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler+0x4>

0800041e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <MemManage_Handler+0x4>

0800042a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler+0x4>

08000436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000464:	f000 f922 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e00a      	b.n	8000494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800047e:	f3af 8000 	nop.w
 8000482:	4601      	mov	r1, r0
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	b2ca      	uxtb	r2, r1
 800048c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf0      	blt.n	800047e <_read+0x12>
	}

return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
	return -1;
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ce:	605a      	str	r2, [r3, #4]
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <_isatty>:

int _isatty(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	return 1;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <_sbrk+0x5c>)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <_sbrk+0x60>)
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <_sbrk+0x64>)
 800052e:	4a12      	ldr	r2, [pc, #72]	; (8000578 <_sbrk+0x68>)
 8000530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	d207      	bcs.n	8000550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000540:	f001 f86c 	bl	800161c <__errno>
 8000544:	4603      	mov	r3, r0
 8000546:	220c      	movs	r2, #12
 8000548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	e009      	b.n	8000564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <_sbrk+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <_sbrk+0x64>)
 8000560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000a000 	.word	0x2000a000
 8000570:	00000400 	.word	0x00000400
 8000574:	20000090 	.word	0x20000090
 8000578:	200000a8 	.word	0x200000a8

0800057c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <SystemInit+0x20>)
 8000582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <SystemInit+0x20>)
 8000588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800058c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff ffea 	bl	800057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f001 f82b 	bl	8001628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005d2:	f7ff fe91 	bl	80002f8 <main>

080005d6 <LoopForever>:

LoopForever:
    b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005e4:	080026a4 	.word	0x080026a4
  ldr r2, =_sbss
 80005e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005ec:	200000a8 	.word	0x200000a8

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_Init+0x3c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <HAL_Init+0x3c>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060a:	2003      	movs	r0, #3
 800060c:	f000 f920 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f80f 	bl	8000634 <HAL_InitTick>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	e001      	b.n	8000626 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000622:	f7ff fed5 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_InitTick+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d023      	beq.n	8000690 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_InitTick+0x70>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_InitTick+0x6c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f91d 	bl	800089e <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10f      	bne.n	800068a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d809      	bhi.n	8000684 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f8f5 	bl	8000866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_InitTick+0x74>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	e007      	b.n	8000694 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	e004      	b.n	8000694 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e001      	b.n	8000694 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x20>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x24>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_IncTick+0x24>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000094 	.word	0x20000094

080006d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_GetTick+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000094 	.word	0x20000094

080006ec <__NVIC_SetPriorityGrouping>:
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetPriority>:
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff47 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff5c 	bl	8000734 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffb0 	bl	800080c <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40007000 	.word	0x40007000

080008d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e2:	d130      	bne.n	8000946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f0:	d038      	beq.n	8000964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2232      	movs	r2, #50	; 0x32
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000918:	e002      	b.n	8000920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3b01      	subs	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800092c:	d102      	bne.n	8000934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f2      	bne.n	800091a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800093c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000940:	d110      	bne.n	8000964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e00f      	b.n	8000966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000952:	d007      	beq.n	8000964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40007000 	.word	0x40007000
 8000978:	20000000 	.word	0x20000000
 800097c:	431bde83 	.word	0x431bde83

08000980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f000 bc4f 	b.w	8001232 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000994:	4b97      	ldr	r3, [pc, #604]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 030c 	and.w	r3, r3, #12
 800099c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800099e:	4b95      	ldr	r3, [pc, #596]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80e6 	beq.w	8000b82 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d007      	beq.n	80009cc <HAL_RCC_OscConfig+0x4c>
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	2b0c      	cmp	r3, #12
 80009c0:	f040 808d 	bne.w	8000ade <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	f040 8089 	bne.w	8000ade <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <HAL_RCC_OscConfig+0x66>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69db      	ldr	r3, [r3, #28]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	f000 bc26 	b.w	8001232 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ea:	4b82      	ldr	r3, [pc, #520]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <HAL_RCC_OscConfig+0x80>
 80009f6:	4b7f      	ldr	r3, [pc, #508]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009fe:	e005      	b.n	8000a0c <HAL_RCC_OscConfig+0x8c>
 8000a00:	4b7c      	ldr	r3, [pc, #496]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d224      	bcs.n	8000a5a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fda1 	bl	800155c <RCC_SetFlashLatencyFromMSIRange>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f000 bc06 	b.w	8001232 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a72      	ldr	r2, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	4b70      	ldr	r3, [pc, #448]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3e:	496d      	ldr	r1, [pc, #436]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	4968      	ldr	r1, [pc, #416]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	604b      	str	r3, [r1, #4]
 8000a58:	e025      	b.n	8000aa6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a5a:	4b66      	ldr	r3, [pc, #408]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a65      	ldr	r2, [pc, #404]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	4b63      	ldr	r3, [pc, #396]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	4960      	ldr	r1, [pc, #384]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a78:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	495b      	ldr	r1, [pc, #364]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d109      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd60 	bl	800155c <RCC_SetFlashLatencyFromMSIRange>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e3c5      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000aa6:	f000 fccd 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <HAL_RCC_OscConfig+0x278>)
 8000ab8:	5ccb      	ldrb	r3, [r1, r3]
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac2:	4a4e      	ldr	r2, [pc, #312]	; (8000bfc <HAL_RCC_OscConfig+0x27c>)
 8000ac4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ac6:	4b4e      	ldr	r3, [pc, #312]	; (8000c00 <HAL_RCC_OscConfig+0x280>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fdb2 	bl	8000634 <HAL_InitTick>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d052      	beq.n	8000b80 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	e3a9      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d032      	beq.n	8000b4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ae6:	4b43      	ldr	r3, [pc, #268]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a42      	ldr	r2, [pc, #264]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000af2:	f7ff fdef 	bl	80006d4 <HAL_GetTick>
 8000af6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000afa:	f7ff fdeb 	bl	80006d4 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e392      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b0c:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f0      	beq.n	8000afa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	4930      	ldr	r1, [pc, #192]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	492b      	ldr	r1, [pc, #172]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	604b      	str	r3, [r1, #4]
 8000b4a:	e01a      	b.n	8000b82 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b52:	f023 0301 	bic.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b58:	f7ff fdbc 	bl	80006d4 <HAL_GetTick>
 8000b5c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b5e:	e008      	b.n	8000b72 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b60:	f7ff fdb8 	bl	80006d4 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d901      	bls.n	8000b72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e35f      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f0      	bne.n	8000b60 <HAL_RCC_OscConfig+0x1e0>
 8000b7e:	e000      	b.n	8000b82 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d073      	beq.n	8000c76 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d005      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x220>
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	2b0c      	cmp	r3, #12
 8000b98:	d10e      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d063      	beq.n	8000c74 <HAL_RCC_OscConfig+0x2f4>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d15f      	bne.n	8000c74 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e33c      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc0:	d106      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x250>
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e025      	b.n	8000c1c <HAL_RCC_OscConfig+0x29c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd8:	d114      	bne.n	8000c04 <HAL_RCC_OscConfig+0x284>
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a02      	ldr	r2, [pc, #8]	; (8000bf4 <HAL_RCC_OscConfig+0x274>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e013      	b.n	8000c1c <HAL_RCC_OscConfig+0x29c>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	080025c4 	.word	0x080025c4
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004
 8000c04:	4b8f      	ldr	r3, [pc, #572]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a8e      	ldr	r2, [pc, #568]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a8b      	ldr	r2, [pc, #556]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d013      	beq.n	8000c4c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c24:	f7ff fd56 	bl	80006d4 <HAL_GetTick>
 8000c28:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c2c:	f7ff fd52 	bl	80006d4 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b64      	cmp	r3, #100	; 0x64
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e2f9      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c3e:	4b81      	ldr	r3, [pc, #516]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0x2ac>
 8000c4a:	e014      	b.n	8000c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fd42 	bl	80006d4 <HAL_GetTick>
 8000c50:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c54:	f7ff fd3e 	bl	80006d4 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b64      	cmp	r3, #100	; 0x64
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e2e5      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c66:	4b77      	ldr	r3, [pc, #476]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x2d4>
 8000c72:	e000      	b.n	8000c76 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d060      	beq.n	8000d44 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d005      	beq.n	8000c94 <HAL_RCC_OscConfig+0x314>
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	2b0c      	cmp	r3, #12
 8000c8c:	d119      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d116      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c94:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <HAL_RCC_OscConfig+0x32c>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e2c2      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	061b      	lsls	r3, r3, #24
 8000cba:	4962      	ldr	r1, [pc, #392]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cc0:	e040      	b.n	8000d44 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d023      	beq.n	8000d12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cca:	4b5e      	ldr	r3, [pc, #376]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fcfd 	bl	80006d4 <HAL_GetTick>
 8000cda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cde:	f7ff fcf9 	bl	80006d4 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e2a0      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfc:	4b51      	ldr	r3, [pc, #324]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	061b      	lsls	r3, r3, #24
 8000d0a:	494e      	ldr	r1, [pc, #312]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	e018      	b.n	8000d44 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a4b      	ldr	r2, [pc, #300]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fcd9 	bl	80006d4 <HAL_GetTick>
 8000d22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fcd5 	bl	80006d4 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e27c      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d38:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f0      	bne.n	8000d26 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8082 	beq.w	8000e56 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d05f      	beq.n	8000e1a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d60:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d037      	beq.n	8000de0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e254      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01b      	beq.n	8000dca <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d98:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000da2:	f7ff fc97 	bl	80006d4 <HAL_GetTick>
 8000da6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc93 	bl	80006d4 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e23a      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1ef      	bne.n	8000daa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd0:	f023 0210 	bic.w	r2, r3, #16
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	491a      	ldr	r1, [pc, #104]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df0:	f7ff fc70 	bl	80006d4 <HAL_GetTick>
 8000df4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fc6c 	bl	80006d4 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b11      	cmp	r3, #17
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e213      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0ef      	beq.n	8000df8 <HAL_RCC_OscConfig+0x478>
 8000e18:	e01d      	b.n	8000e56 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fc53 	bl	80006d4 <HAL_GetTick>
 8000e2e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e30:	e00a      	b.n	8000e48 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc4f 	bl	80006d4 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b11      	cmp	r3, #17
 8000e3e:	d903      	bls.n	8000e48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1f6      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
 8000e44:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e48:	4ba9      	ldr	r3, [pc, #676]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1ed      	bne.n	8000e32 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80bd 	beq.w	8000fde <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e6a:	4ba1      	ldr	r3, [pc, #644]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10e      	bne.n	8000e94 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b9e      	ldr	r3, [pc, #632]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a9d      	ldr	r2, [pc, #628]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b9b      	ldr	r3, [pc, #620]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e94:	4b97      	ldr	r3, [pc, #604]	; (80010f4 <HAL_RCC_OscConfig+0x774>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d118      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ea0:	4b94      	ldr	r3, [pc, #592]	; (80010f4 <HAL_RCC_OscConfig+0x774>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a93      	ldr	r2, [pc, #588]	; (80010f4 <HAL_RCC_OscConfig+0x774>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eac:	f7ff fc12 	bl	80006d4 <HAL_GetTick>
 8000eb0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb4:	f7ff fc0e 	bl	80006d4 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e1b5      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <HAL_RCC_OscConfig+0x774>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8000ede:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	497f      	ldr	r1, [pc, #508]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d010      	beq.n	8000f26 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f04:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f0a:	4a79      	ldr	r2, [pc, #484]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f14:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1a:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f24:	e018      	b.n	8000f58 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f26:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2c:	4a70      	ldr	r2, [pc, #448]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f36:	e00f      	b.n	8000f58 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f3e:	4a6c      	ldr	r2, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f48:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4e:	4a68      	ldr	r2, [pc, #416]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d016      	beq.n	8000f8e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f60:	f7ff fbb8 	bl	80006d4 <HAL_GetTick>
 8000f64:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f66:	e00a      	b.n	8000f7e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f68:	f7ff fbb4 	bl	80006d4 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e159      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0ed      	beq.n	8000f68 <HAL_RCC_OscConfig+0x5e8>
 8000f8c:	e01d      	b.n	8000fca <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fba1 	bl	80006d4 <HAL_GetTick>
 8000f92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f94:	e00a      	b.n	8000fac <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fb9d 	bl	80006d4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e142      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fac:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ed      	bne.n	8000f96 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03c      	beq.n	8001064 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01c      	beq.n	800102c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001002:	f7ff fb67 	bl	80006d4 <HAL_GetTick>
 8001006:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800100a:	f7ff fb63 	bl	80006d4 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e10a      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 800101e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0ef      	beq.n	800100a <HAL_RCC_OscConfig+0x68a>
 800102a:	e01b      	b.n	8001064 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 800102e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff fb4a 	bl	80006d4 <HAL_GetTick>
 8001040:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001044:	f7ff fb46 	bl	80006d4 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e0ed      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 8001058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ef      	bne.n	8001044 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80e1 	beq.w	8001230 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	2b02      	cmp	r3, #2
 8001074:	f040 80b5 	bne.w	80011e2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	429a      	cmp	r2, r3
 800108a:	d124      	bne.n	80010d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	3b01      	subs	r3, #1
 8001098:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	429a      	cmp	r2, r3
 800109c:	d11b      	bne.n	80010d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d113      	bne.n	80010d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	3b01      	subs	r3, #1
 80010bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010be:	429a      	cmp	r2, r3
 80010c0:	d109      	bne.n	80010d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	085b      	lsrs	r3, r3, #1
 80010ce:	3b01      	subs	r3, #1
 80010d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d05f      	beq.n	8001196 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d05a      	beq.n	8001192 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_RCC_OscConfig+0x770>)
 80010e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010e8:	f7ff faf4 	bl	80006d4 <HAL_GetTick>
 80010ec:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ee:	e00c      	b.n	800110a <HAL_RCC_OscConfig+0x78a>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff faec 	bl	80006d4 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e093      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	4b49      	ldr	r3, [pc, #292]	; (8001240 <HAL_RCC_OscConfig+0x8c0>)
 800111c:	4013      	ands	r3, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001126:	3a01      	subs	r2, #1
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	4311      	orrs	r1, r2
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001130:	0212      	lsls	r2, r2, #8
 8001132:	4311      	orrs	r1, r2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001138:	0852      	lsrs	r2, r2, #1
 800113a:	3a01      	subs	r2, #1
 800113c:	0552      	lsls	r2, r2, #21
 800113e:	4311      	orrs	r1, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001144:	0852      	lsrs	r2, r2, #1
 8001146:	3a01      	subs	r2, #1
 8001148:	0652      	lsls	r2, r2, #25
 800114a:	430a      	orrs	r2, r1
 800114c:	493b      	ldr	r1, [pc, #236]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a39      	ldr	r2, [pc, #228]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4a36      	ldr	r2, [pc, #216]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001168:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800116a:	f7ff fab3 	bl	80006d4 <HAL_GetTick>
 800116e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff faaf 	bl	80006d4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e056      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001190:	e04e      	b.n	8001230 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e04d      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d146      	bne.n	8001230 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ac:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4a22      	ldr	r2, [pc, #136]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011ba:	f7ff fa8b 	bl	80006d4 <HAL_GetTick>
 80011be:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fa87 	bl	80006d4 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e02e      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x842>
 80011e0:	e026      	b.n	8001230 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d021      	beq.n	800122c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 80011ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fa6e 	bl	80006d4 <HAL_GetTick>
 80011f8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fa6a 	bl	80006d4 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e011      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_RCC_OscConfig+0x8bc>)
 8001220:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001224:	f023 0303 	bic.w	r3, r3, #3
 8001228:	60d3      	str	r3, [r2, #12]
 800122a:	e001      	b.n	8001230 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	f99f808c 	.word	0xf99f808c

08001244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0e7      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001258:	4b75      	ldr	r3, [pc, #468]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d910      	bls.n	8001288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4970      	ldr	r1, [pc, #448]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0cf      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d010      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d908      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a4:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4960      	ldr	r1, [pc, #384]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d04c      	beq.n	800135c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d121      	bne.n	800131a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0a6      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d107      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d115      	bne.n	800131a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e09a      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e08e      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e086      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 0203 	bic.w	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4943      	ldr	r1, [pc, #268]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001328:	4313      	orrs	r3, r2
 800132a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800132c:	f7ff f9d2 	bl	80006d4 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001332:	e00a      	b.n	800134a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001334:	f7ff f9ce 	bl	80006d4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001342:	4293      	cmp	r3, r2
 8001344:	d901      	bls.n	800134a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e06e      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 020c 	and.w	r2, r3, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	429a      	cmp	r2, r3
 800135a:	d1eb      	bne.n	8001334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d010      	beq.n	800138a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001374:	429a      	cmp	r2, r3
 8001376:	d208      	bcs.n	800138a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	492b      	ldr	r1, [pc, #172]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d210      	bcs.n	80013ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 0207 	bic.w	r2, r3, #7
 80013a0:	4923      	ldr	r1, [pc, #140]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_RCC_ClockConfig+0x1ec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e036      	b.n	8001428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4918      	ldr	r1, [pc, #96]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4910      	ldr	r1, [pc, #64]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f8:	f000 f824 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	490b      	ldr	r1, [pc, #44]	; (8001438 <HAL_RCC_ClockConfig+0x1f4>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1fc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f909 	bl	8000634 <HAL_InitTick>
 8001422:	4603      	mov	r3, r0
 8001424:	72fb      	strb	r3, [r7, #11]

  return status;
 8001426:	7afb      	ldrb	r3, [r7, #11]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40022000 	.word	0x40022000
 8001434:	40021000 	.word	0x40021000
 8001438:	080025c4 	.word	0x080025c4
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x34>
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d121      	bne.n	80014b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d11e      	bne.n	80014b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001478:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e005      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80014a0:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10d      	bne.n	80014cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d102      	bne.n	80014c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_RCC_GetSysClockFreq+0x110>)
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	e004      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_RCC_GetSysClockFreq+0x114>)
 80014ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d134      	bne.n	800153c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0xa6>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d003      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0xac>
 80014e8:	e005      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_RCC_GetSysClockFreq+0x110>)
 80014ec:	617b      	str	r3, [r7, #20]
      break;
 80014ee:	e005      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_GetSysClockFreq+0x114>)
 80014f2:	617b      	str	r3, [r7, #20]
      break;
 80014f4:	e002      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	617b      	str	r3, [r7, #20]
      break;
 80014fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	3301      	adds	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	fb03 f202 	mul.w	r2, r3, r2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_GetSysClockFreq+0x108>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	0e5b      	lsrs	r3, r3, #25
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	3301      	adds	r3, #1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800153c:	69bb      	ldr	r3, [r7, #24]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	080025d4 	.word	0x080025d4
 8001554:	00f42400 	.word	0x00f42400
 8001558:	007a1200 	.word	0x007a1200

0800155c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001574:	f7ff f9a0 	bl	80008b8 <HAL_PWREx_GetVoltageRange>
 8001578:	6178      	str	r0, [r7, #20]
 800157a:	e014      	b.n	80015a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6593      	str	r3, [r2, #88]	; 0x58
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001594:	f7ff f990 	bl	80008b8 <HAL_PWREx_GetVoltageRange>
 8001598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ac:	d10b      	bne.n	80015c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b80      	cmp	r3, #128	; 0x80
 80015b2:	d919      	bls.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2ba0      	cmp	r3, #160	; 0xa0
 80015b8:	d902      	bls.n	80015c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80015ba:	2302      	movs	r3, #2
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	e013      	b.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e010      	b.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b80      	cmp	r3, #128	; 0x80
 80015ca:	d902      	bls.n	80015d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	e00a      	b.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d102      	bne.n	80015de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	e004      	b.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b70      	cmp	r3, #112	; 0x70
 80015e2:	d101      	bne.n	80015e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0207 	bic.w	r2, r3, #7
 80015f0:	4909      	ldr	r1, [pc, #36]	; (8001618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	40022000 	.word	0x40022000

0800161c <__errno>:
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <__errno+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c

08001628 <__libc_init_array>:
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	4d0d      	ldr	r5, [pc, #52]	; (8001660 <__libc_init_array+0x38>)
 800162c:	4c0d      	ldr	r4, [pc, #52]	; (8001664 <__libc_init_array+0x3c>)
 800162e:	1b64      	subs	r4, r4, r5
 8001630:	10a4      	asrs	r4, r4, #2
 8001632:	2600      	movs	r6, #0
 8001634:	42a6      	cmp	r6, r4
 8001636:	d109      	bne.n	800164c <__libc_init_array+0x24>
 8001638:	4d0b      	ldr	r5, [pc, #44]	; (8001668 <__libc_init_array+0x40>)
 800163a:	4c0c      	ldr	r4, [pc, #48]	; (800166c <__libc_init_array+0x44>)
 800163c:	f000 ffae 	bl	800259c <_init>
 8001640:	1b64      	subs	r4, r4, r5
 8001642:	10a4      	asrs	r4, r4, #2
 8001644:	2600      	movs	r6, #0
 8001646:	42a6      	cmp	r6, r4
 8001648:	d105      	bne.n	8001656 <__libc_init_array+0x2e>
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001650:	4798      	blx	r3
 8001652:	3601      	adds	r6, #1
 8001654:	e7ee      	b.n	8001634 <__libc_init_array+0xc>
 8001656:	f855 3b04 	ldr.w	r3, [r5], #4
 800165a:	4798      	blx	r3
 800165c:	3601      	adds	r6, #1
 800165e:	e7f2      	b.n	8001646 <__libc_init_array+0x1e>
 8001660:	0800269c 	.word	0x0800269c
 8001664:	0800269c 	.word	0x0800269c
 8001668:	0800269c 	.word	0x0800269c
 800166c:	080026a0 	.word	0x080026a0

08001670 <memset>:
 8001670:	4402      	add	r2, r0
 8001672:	4603      	mov	r3, r0
 8001674:	4293      	cmp	r3, r2
 8001676:	d100      	bne.n	800167a <memset+0xa>
 8001678:	4770      	bx	lr
 800167a:	f803 1b01 	strb.w	r1, [r3], #1
 800167e:	e7f9      	b.n	8001674 <memset+0x4>

08001680 <iprintf>:
 8001680:	b40f      	push	{r0, r1, r2, r3}
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <iprintf+0x2c>)
 8001684:	b513      	push	{r0, r1, r4, lr}
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	b124      	cbz	r4, 8001694 <iprintf+0x14>
 800168a:	69a3      	ldr	r3, [r4, #24]
 800168c:	b913      	cbnz	r3, 8001694 <iprintf+0x14>
 800168e:	4620      	mov	r0, r4
 8001690:	f000 f866 	bl	8001760 <__sinit>
 8001694:	ab05      	add	r3, sp, #20
 8001696:	9a04      	ldr	r2, [sp, #16]
 8001698:	68a1      	ldr	r1, [r4, #8]
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	4620      	mov	r0, r4
 800169e:	f000 f9bd 	bl	8001a1c <_vfiprintf_r>
 80016a2:	b002      	add	sp, #8
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	b004      	add	sp, #16
 80016aa:	4770      	bx	lr
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <std>:
 80016b0:	2300      	movs	r3, #0
 80016b2:	b510      	push	{r4, lr}
 80016b4:	4604      	mov	r4, r0
 80016b6:	e9c0 3300 	strd	r3, r3, [r0]
 80016ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016be:	6083      	str	r3, [r0, #8]
 80016c0:	8181      	strh	r1, [r0, #12]
 80016c2:	6643      	str	r3, [r0, #100]	; 0x64
 80016c4:	81c2      	strh	r2, [r0, #14]
 80016c6:	6183      	str	r3, [r0, #24]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2208      	movs	r2, #8
 80016cc:	305c      	adds	r0, #92	; 0x5c
 80016ce:	f7ff ffcf 	bl	8001670 <memset>
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <std+0x38>)
 80016d4:	6263      	str	r3, [r4, #36]	; 0x24
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <std+0x3c>)
 80016d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <std+0x40>)
 80016dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <std+0x44>)
 80016e0:	6224      	str	r4, [r4, #32]
 80016e2:	6323      	str	r3, [r4, #48]	; 0x30
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	08001fc5 	.word	0x08001fc5
 80016ec:	08001fe7 	.word	0x08001fe7
 80016f0:	0800201f 	.word	0x0800201f
 80016f4:	08002043 	.word	0x08002043

080016f8 <_cleanup_r>:
 80016f8:	4901      	ldr	r1, [pc, #4]	; (8001700 <_cleanup_r+0x8>)
 80016fa:	f000 b8af 	b.w	800185c <_fwalk_reent>
 80016fe:	bf00      	nop
 8001700:	0800231d 	.word	0x0800231d

08001704 <__sfmoreglue>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	2268      	movs	r2, #104	; 0x68
 8001708:	1e4d      	subs	r5, r1, #1
 800170a:	4355      	muls	r5, r2
 800170c:	460e      	mov	r6, r1
 800170e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001712:	f000 f8e5 	bl	80018e0 <_malloc_r>
 8001716:	4604      	mov	r4, r0
 8001718:	b140      	cbz	r0, 800172c <__sfmoreglue+0x28>
 800171a:	2100      	movs	r1, #0
 800171c:	e9c0 1600 	strd	r1, r6, [r0]
 8001720:	300c      	adds	r0, #12
 8001722:	60a0      	str	r0, [r4, #8]
 8001724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001728:	f7ff ffa2 	bl	8001670 <memset>
 800172c:	4620      	mov	r0, r4
 800172e:	bd70      	pop	{r4, r5, r6, pc}

08001730 <__sfp_lock_acquire>:
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <__sfp_lock_acquire+0x8>)
 8001732:	f000 b8b3 	b.w	800189c <__retarget_lock_acquire_recursive>
 8001736:	bf00      	nop
 8001738:	20000099 	.word	0x20000099

0800173c <__sfp_lock_release>:
 800173c:	4801      	ldr	r0, [pc, #4]	; (8001744 <__sfp_lock_release+0x8>)
 800173e:	f000 b8ae 	b.w	800189e <__retarget_lock_release_recursive>
 8001742:	bf00      	nop
 8001744:	20000099 	.word	0x20000099

08001748 <__sinit_lock_acquire>:
 8001748:	4801      	ldr	r0, [pc, #4]	; (8001750 <__sinit_lock_acquire+0x8>)
 800174a:	f000 b8a7 	b.w	800189c <__retarget_lock_acquire_recursive>
 800174e:	bf00      	nop
 8001750:	2000009a 	.word	0x2000009a

08001754 <__sinit_lock_release>:
 8001754:	4801      	ldr	r0, [pc, #4]	; (800175c <__sinit_lock_release+0x8>)
 8001756:	f000 b8a2 	b.w	800189e <__retarget_lock_release_recursive>
 800175a:	bf00      	nop
 800175c:	2000009a 	.word	0x2000009a

08001760 <__sinit>:
 8001760:	b510      	push	{r4, lr}
 8001762:	4604      	mov	r4, r0
 8001764:	f7ff fff0 	bl	8001748 <__sinit_lock_acquire>
 8001768:	69a3      	ldr	r3, [r4, #24]
 800176a:	b11b      	cbz	r3, 8001774 <__sinit+0x14>
 800176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001770:	f7ff bff0 	b.w	8001754 <__sinit_lock_release>
 8001774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001778:	6523      	str	r3, [r4, #80]	; 0x50
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <__sinit+0x68>)
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <__sinit+0x6c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	62a2      	str	r2, [r4, #40]	; 0x28
 8001782:	42a3      	cmp	r3, r4
 8001784:	bf04      	itt	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	61a3      	streq	r3, [r4, #24]
 800178a:	4620      	mov	r0, r4
 800178c:	f000 f820 	bl	80017d0 <__sfp>
 8001790:	6060      	str	r0, [r4, #4]
 8001792:	4620      	mov	r0, r4
 8001794:	f000 f81c 	bl	80017d0 <__sfp>
 8001798:	60a0      	str	r0, [r4, #8]
 800179a:	4620      	mov	r0, r4
 800179c:	f000 f818 	bl	80017d0 <__sfp>
 80017a0:	2200      	movs	r2, #0
 80017a2:	60e0      	str	r0, [r4, #12]
 80017a4:	2104      	movs	r1, #4
 80017a6:	6860      	ldr	r0, [r4, #4]
 80017a8:	f7ff ff82 	bl	80016b0 <std>
 80017ac:	68a0      	ldr	r0, [r4, #8]
 80017ae:	2201      	movs	r2, #1
 80017b0:	2109      	movs	r1, #9
 80017b2:	f7ff ff7d 	bl	80016b0 <std>
 80017b6:	68e0      	ldr	r0, [r4, #12]
 80017b8:	2202      	movs	r2, #2
 80017ba:	2112      	movs	r1, #18
 80017bc:	f7ff ff78 	bl	80016b0 <std>
 80017c0:	2301      	movs	r3, #1
 80017c2:	61a3      	str	r3, [r4, #24]
 80017c4:	e7d2      	b.n	800176c <__sinit+0xc>
 80017c6:	bf00      	nop
 80017c8:	08002604 	.word	0x08002604
 80017cc:	080016f9 	.word	0x080016f9

080017d0 <__sfp>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	4607      	mov	r7, r0
 80017d4:	f7ff ffac 	bl	8001730 <__sfp_lock_acquire>
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <__sfp+0x84>)
 80017da:	681e      	ldr	r6, [r3, #0]
 80017dc:	69b3      	ldr	r3, [r6, #24]
 80017de:	b913      	cbnz	r3, 80017e6 <__sfp+0x16>
 80017e0:	4630      	mov	r0, r6
 80017e2:	f7ff ffbd 	bl	8001760 <__sinit>
 80017e6:	3648      	adds	r6, #72	; 0x48
 80017e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	d503      	bpl.n	80017f8 <__sfp+0x28>
 80017f0:	6833      	ldr	r3, [r6, #0]
 80017f2:	b30b      	cbz	r3, 8001838 <__sfp+0x68>
 80017f4:	6836      	ldr	r6, [r6, #0]
 80017f6:	e7f7      	b.n	80017e8 <__sfp+0x18>
 80017f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017fc:	b9d5      	cbnz	r5, 8001834 <__sfp+0x64>
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <__sfp+0x88>)
 8001800:	60e3      	str	r3, [r4, #12]
 8001802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001806:	6665      	str	r5, [r4, #100]	; 0x64
 8001808:	f000 f847 	bl	800189a <__retarget_lock_init_recursive>
 800180c:	f7ff ff96 	bl	800173c <__sfp_lock_release>
 8001810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001818:	6025      	str	r5, [r4, #0]
 800181a:	61a5      	str	r5, [r4, #24]
 800181c:	2208      	movs	r2, #8
 800181e:	4629      	mov	r1, r5
 8001820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001824:	f7ff ff24 	bl	8001670 <memset>
 8001828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800182c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001830:	4620      	mov	r0, r4
 8001832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001834:	3468      	adds	r4, #104	; 0x68
 8001836:	e7d9      	b.n	80017ec <__sfp+0x1c>
 8001838:	2104      	movs	r1, #4
 800183a:	4638      	mov	r0, r7
 800183c:	f7ff ff62 	bl	8001704 <__sfmoreglue>
 8001840:	4604      	mov	r4, r0
 8001842:	6030      	str	r0, [r6, #0]
 8001844:	2800      	cmp	r0, #0
 8001846:	d1d5      	bne.n	80017f4 <__sfp+0x24>
 8001848:	f7ff ff78 	bl	800173c <__sfp_lock_release>
 800184c:	230c      	movs	r3, #12
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	e7ee      	b.n	8001830 <__sfp+0x60>
 8001852:	bf00      	nop
 8001854:	08002604 	.word	0x08002604
 8001858:	ffff0001 	.word	0xffff0001

0800185c <_fwalk_reent>:
 800185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001860:	4606      	mov	r6, r0
 8001862:	4688      	mov	r8, r1
 8001864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001868:	2700      	movs	r7, #0
 800186a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800186e:	f1b9 0901 	subs.w	r9, r9, #1
 8001872:	d505      	bpl.n	8001880 <_fwalk_reent+0x24>
 8001874:	6824      	ldr	r4, [r4, #0]
 8001876:	2c00      	cmp	r4, #0
 8001878:	d1f7      	bne.n	800186a <_fwalk_reent+0xe>
 800187a:	4638      	mov	r0, r7
 800187c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001880:	89ab      	ldrh	r3, [r5, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d907      	bls.n	8001896 <_fwalk_reent+0x3a>
 8001886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800188a:	3301      	adds	r3, #1
 800188c:	d003      	beq.n	8001896 <_fwalk_reent+0x3a>
 800188e:	4629      	mov	r1, r5
 8001890:	4630      	mov	r0, r6
 8001892:	47c0      	blx	r8
 8001894:	4307      	orrs	r7, r0
 8001896:	3568      	adds	r5, #104	; 0x68
 8001898:	e7e9      	b.n	800186e <_fwalk_reent+0x12>

0800189a <__retarget_lock_init_recursive>:
 800189a:	4770      	bx	lr

0800189c <__retarget_lock_acquire_recursive>:
 800189c:	4770      	bx	lr

0800189e <__retarget_lock_release_recursive>:
 800189e:	4770      	bx	lr

080018a0 <sbrk_aligned>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4e0e      	ldr	r6, [pc, #56]	; (80018dc <sbrk_aligned+0x3c>)
 80018a4:	460c      	mov	r4, r1
 80018a6:	6831      	ldr	r1, [r6, #0]
 80018a8:	4605      	mov	r5, r0
 80018aa:	b911      	cbnz	r1, 80018b2 <sbrk_aligned+0x12>
 80018ac:	f000 fb7a 	bl	8001fa4 <_sbrk_r>
 80018b0:	6030      	str	r0, [r6, #0]
 80018b2:	4621      	mov	r1, r4
 80018b4:	4628      	mov	r0, r5
 80018b6:	f000 fb75 	bl	8001fa4 <_sbrk_r>
 80018ba:	1c43      	adds	r3, r0, #1
 80018bc:	d00a      	beq.n	80018d4 <sbrk_aligned+0x34>
 80018be:	1cc4      	adds	r4, r0, #3
 80018c0:	f024 0403 	bic.w	r4, r4, #3
 80018c4:	42a0      	cmp	r0, r4
 80018c6:	d007      	beq.n	80018d8 <sbrk_aligned+0x38>
 80018c8:	1a21      	subs	r1, r4, r0
 80018ca:	4628      	mov	r0, r5
 80018cc:	f000 fb6a 	bl	8001fa4 <_sbrk_r>
 80018d0:	3001      	adds	r0, #1
 80018d2:	d101      	bne.n	80018d8 <sbrk_aligned+0x38>
 80018d4:	f04f 34ff 	mov.w	r4, #4294967295
 80018d8:	4620      	mov	r0, r4
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	200000a0 	.word	0x200000a0

080018e0 <_malloc_r>:
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e4:	1ccd      	adds	r5, r1, #3
 80018e6:	f025 0503 	bic.w	r5, r5, #3
 80018ea:	3508      	adds	r5, #8
 80018ec:	2d0c      	cmp	r5, #12
 80018ee:	bf38      	it	cc
 80018f0:	250c      	movcc	r5, #12
 80018f2:	2d00      	cmp	r5, #0
 80018f4:	4607      	mov	r7, r0
 80018f6:	db01      	blt.n	80018fc <_malloc_r+0x1c>
 80018f8:	42a9      	cmp	r1, r5
 80018fa:	d905      	bls.n	8001908 <_malloc_r+0x28>
 80018fc:	230c      	movs	r3, #12
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	2600      	movs	r6, #0
 8001902:	4630      	mov	r0, r6
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	4e2e      	ldr	r6, [pc, #184]	; (80019c4 <_malloc_r+0xe4>)
 800190a:	f000 fdbb 	bl	8002484 <__malloc_lock>
 800190e:	6833      	ldr	r3, [r6, #0]
 8001910:	461c      	mov	r4, r3
 8001912:	bb34      	cbnz	r4, 8001962 <_malloc_r+0x82>
 8001914:	4629      	mov	r1, r5
 8001916:	4638      	mov	r0, r7
 8001918:	f7ff ffc2 	bl	80018a0 <sbrk_aligned>
 800191c:	1c43      	adds	r3, r0, #1
 800191e:	4604      	mov	r4, r0
 8001920:	d14d      	bne.n	80019be <_malloc_r+0xde>
 8001922:	6834      	ldr	r4, [r6, #0]
 8001924:	4626      	mov	r6, r4
 8001926:	2e00      	cmp	r6, #0
 8001928:	d140      	bne.n	80019ac <_malloc_r+0xcc>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	4631      	mov	r1, r6
 800192e:	4638      	mov	r0, r7
 8001930:	eb04 0803 	add.w	r8, r4, r3
 8001934:	f000 fb36 	bl	8001fa4 <_sbrk_r>
 8001938:	4580      	cmp	r8, r0
 800193a:	d13a      	bne.n	80019b2 <_malloc_r+0xd2>
 800193c:	6821      	ldr	r1, [r4, #0]
 800193e:	3503      	adds	r5, #3
 8001940:	1a6d      	subs	r5, r5, r1
 8001942:	f025 0503 	bic.w	r5, r5, #3
 8001946:	3508      	adds	r5, #8
 8001948:	2d0c      	cmp	r5, #12
 800194a:	bf38      	it	cc
 800194c:	250c      	movcc	r5, #12
 800194e:	4629      	mov	r1, r5
 8001950:	4638      	mov	r0, r7
 8001952:	f7ff ffa5 	bl	80018a0 <sbrk_aligned>
 8001956:	3001      	adds	r0, #1
 8001958:	d02b      	beq.n	80019b2 <_malloc_r+0xd2>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	442b      	add	r3, r5
 800195e:	6023      	str	r3, [r4, #0]
 8001960:	e00e      	b.n	8001980 <_malloc_r+0xa0>
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	1b52      	subs	r2, r2, r5
 8001966:	d41e      	bmi.n	80019a6 <_malloc_r+0xc6>
 8001968:	2a0b      	cmp	r2, #11
 800196a:	d916      	bls.n	800199a <_malloc_r+0xba>
 800196c:	1961      	adds	r1, r4, r5
 800196e:	42a3      	cmp	r3, r4
 8001970:	6025      	str	r5, [r4, #0]
 8001972:	bf18      	it	ne
 8001974:	6059      	strne	r1, [r3, #4]
 8001976:	6863      	ldr	r3, [r4, #4]
 8001978:	bf08      	it	eq
 800197a:	6031      	streq	r1, [r6, #0]
 800197c:	5162      	str	r2, [r4, r5]
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	4638      	mov	r0, r7
 8001982:	f104 060b 	add.w	r6, r4, #11
 8001986:	f000 fd83 	bl	8002490 <__malloc_unlock>
 800198a:	f026 0607 	bic.w	r6, r6, #7
 800198e:	1d23      	adds	r3, r4, #4
 8001990:	1af2      	subs	r2, r6, r3
 8001992:	d0b6      	beq.n	8001902 <_malloc_r+0x22>
 8001994:	1b9b      	subs	r3, r3, r6
 8001996:	50a3      	str	r3, [r4, r2]
 8001998:	e7b3      	b.n	8001902 <_malloc_r+0x22>
 800199a:	6862      	ldr	r2, [r4, #4]
 800199c:	42a3      	cmp	r3, r4
 800199e:	bf0c      	ite	eq
 80019a0:	6032      	streq	r2, [r6, #0]
 80019a2:	605a      	strne	r2, [r3, #4]
 80019a4:	e7ec      	b.n	8001980 <_malloc_r+0xa0>
 80019a6:	4623      	mov	r3, r4
 80019a8:	6864      	ldr	r4, [r4, #4]
 80019aa:	e7b2      	b.n	8001912 <_malloc_r+0x32>
 80019ac:	4634      	mov	r4, r6
 80019ae:	6876      	ldr	r6, [r6, #4]
 80019b0:	e7b9      	b.n	8001926 <_malloc_r+0x46>
 80019b2:	230c      	movs	r3, #12
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4638      	mov	r0, r7
 80019b8:	f000 fd6a 	bl	8002490 <__malloc_unlock>
 80019bc:	e7a1      	b.n	8001902 <_malloc_r+0x22>
 80019be:	6025      	str	r5, [r4, #0]
 80019c0:	e7de      	b.n	8001980 <_malloc_r+0xa0>
 80019c2:	bf00      	nop
 80019c4:	2000009c 	.word	0x2000009c

080019c8 <__sfputc_r>:
 80019c8:	6893      	ldr	r3, [r2, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	b410      	push	{r4}
 80019d0:	6093      	str	r3, [r2, #8]
 80019d2:	da08      	bge.n	80019e6 <__sfputc_r+0x1e>
 80019d4:	6994      	ldr	r4, [r2, #24]
 80019d6:	42a3      	cmp	r3, r4
 80019d8:	db01      	blt.n	80019de <__sfputc_r+0x16>
 80019da:	290a      	cmp	r1, #10
 80019dc:	d103      	bne.n	80019e6 <__sfputc_r+0x1e>
 80019de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019e2:	f000 bb33 	b.w	800204c <__swbuf_r>
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	1c58      	adds	r0, r3, #1
 80019ea:	6010      	str	r0, [r2, #0]
 80019ec:	7019      	strb	r1, [r3, #0]
 80019ee:	4608      	mov	r0, r1
 80019f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <__sfputs_r>:
 80019f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f8:	4606      	mov	r6, r0
 80019fa:	460f      	mov	r7, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	18d5      	adds	r5, r2, r3
 8001a00:	42ac      	cmp	r4, r5
 8001a02:	d101      	bne.n	8001a08 <__sfputs_r+0x12>
 8001a04:	2000      	movs	r0, #0
 8001a06:	e007      	b.n	8001a18 <__sfputs_r+0x22>
 8001a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a0c:	463a      	mov	r2, r7
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f7ff ffda 	bl	80019c8 <__sfputc_r>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d1f3      	bne.n	8001a00 <__sfputs_r+0xa>
 8001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a1c <_vfiprintf_r>:
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	460d      	mov	r5, r1
 8001a22:	b09d      	sub	sp, #116	; 0x74
 8001a24:	4614      	mov	r4, r2
 8001a26:	4698      	mov	r8, r3
 8001a28:	4606      	mov	r6, r0
 8001a2a:	b118      	cbz	r0, 8001a34 <_vfiprintf_r+0x18>
 8001a2c:	6983      	ldr	r3, [r0, #24]
 8001a2e:	b90b      	cbnz	r3, 8001a34 <_vfiprintf_r+0x18>
 8001a30:	f7ff fe96 	bl	8001760 <__sinit>
 8001a34:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <_vfiprintf_r+0x240>)
 8001a36:	429d      	cmp	r5, r3
 8001a38:	d11b      	bne.n	8001a72 <_vfiprintf_r+0x56>
 8001a3a:	6875      	ldr	r5, [r6, #4]
 8001a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a3e:	07d9      	lsls	r1, r3, #31
 8001a40:	d405      	bmi.n	8001a4e <_vfiprintf_r+0x32>
 8001a42:	89ab      	ldrh	r3, [r5, #12]
 8001a44:	059a      	lsls	r2, r3, #22
 8001a46:	d402      	bmi.n	8001a4e <_vfiprintf_r+0x32>
 8001a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a4a:	f7ff ff27 	bl	800189c <__retarget_lock_acquire_recursive>
 8001a4e:	89ab      	ldrh	r3, [r5, #12]
 8001a50:	071b      	lsls	r3, r3, #28
 8001a52:	d501      	bpl.n	8001a58 <_vfiprintf_r+0x3c>
 8001a54:	692b      	ldr	r3, [r5, #16]
 8001a56:	b9eb      	cbnz	r3, 8001a94 <_vfiprintf_r+0x78>
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f000 fb5a 	bl	8002114 <__swsetup_r>
 8001a60:	b1c0      	cbz	r0, 8001a94 <_vfiprintf_r+0x78>
 8001a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	d50e      	bpl.n	8001a86 <_vfiprintf_r+0x6a>
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	b01d      	add	sp, #116	; 0x74
 8001a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a72:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <_vfiprintf_r+0x244>)
 8001a74:	429d      	cmp	r5, r3
 8001a76:	d101      	bne.n	8001a7c <_vfiprintf_r+0x60>
 8001a78:	68b5      	ldr	r5, [r6, #8]
 8001a7a:	e7df      	b.n	8001a3c <_vfiprintf_r+0x20>
 8001a7c:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <_vfiprintf_r+0x248>)
 8001a7e:	429d      	cmp	r5, r3
 8001a80:	bf08      	it	eq
 8001a82:	68f5      	ldreq	r5, [r6, #12]
 8001a84:	e7da      	b.n	8001a3c <_vfiprintf_r+0x20>
 8001a86:	89ab      	ldrh	r3, [r5, #12]
 8001a88:	0598      	lsls	r0, r3, #22
 8001a8a:	d4ed      	bmi.n	8001a68 <_vfiprintf_r+0x4c>
 8001a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a8e:	f7ff ff06 	bl	800189e <__retarget_lock_release_recursive>
 8001a92:	e7e9      	b.n	8001a68 <_vfiprintf_r+0x4c>
 8001a94:	2300      	movs	r3, #0
 8001a96:	9309      	str	r3, [sp, #36]	; 0x24
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001aa2:	2330      	movs	r3, #48	; 0x30
 8001aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001c68 <_vfiprintf_r+0x24c>
 8001aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001aac:	f04f 0901 	mov.w	r9, #1
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	469a      	mov	sl, r3
 8001ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ab8:	b10a      	cbz	r2, 8001abe <_vfiprintf_r+0xa2>
 8001aba:	2a25      	cmp	r2, #37	; 0x25
 8001abc:	d1f9      	bne.n	8001ab2 <_vfiprintf_r+0x96>
 8001abe:	ebba 0b04 	subs.w	fp, sl, r4
 8001ac2:	d00b      	beq.n	8001adc <_vfiprintf_r+0xc0>
 8001ac4:	465b      	mov	r3, fp
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4630      	mov	r0, r6
 8001acc:	f7ff ff93 	bl	80019f6 <__sfputs_r>
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	f000 80aa 	beq.w	8001c2a <_vfiprintf_r+0x20e>
 8001ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ad8:	445a      	add	r2, fp
 8001ada:	9209      	str	r2, [sp, #36]	; 0x24
 8001adc:	f89a 3000 	ldrb.w	r3, [sl]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a2 	beq.w	8001c2a <_vfiprintf_r+0x20e>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001af0:	f10a 0a01 	add.w	sl, sl, #1
 8001af4:	9304      	str	r3, [sp, #16]
 8001af6:	9307      	str	r3, [sp, #28]
 8001af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001afc:	931a      	str	r3, [sp, #104]	; 0x68
 8001afe:	4654      	mov	r4, sl
 8001b00:	2205      	movs	r2, #5
 8001b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b06:	4858      	ldr	r0, [pc, #352]	; (8001c68 <_vfiprintf_r+0x24c>)
 8001b08:	f7fe fb62 	bl	80001d0 <memchr>
 8001b0c:	9a04      	ldr	r2, [sp, #16]
 8001b0e:	b9d8      	cbnz	r0, 8001b48 <_vfiprintf_r+0x12c>
 8001b10:	06d1      	lsls	r1, r2, #27
 8001b12:	bf44      	itt	mi
 8001b14:	2320      	movmi	r3, #32
 8001b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b1a:	0713      	lsls	r3, r2, #28
 8001b1c:	bf44      	itt	mi
 8001b1e:	232b      	movmi	r3, #43	; 0x2b
 8001b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b24:	f89a 3000 	ldrb.w	r3, [sl]
 8001b28:	2b2a      	cmp	r3, #42	; 0x2a
 8001b2a:	d015      	beq.n	8001b58 <_vfiprintf_r+0x13c>
 8001b2c:	9a07      	ldr	r2, [sp, #28]
 8001b2e:	4654      	mov	r4, sl
 8001b30:	2000      	movs	r0, #0
 8001b32:	f04f 0c0a 	mov.w	ip, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b3c:	3b30      	subs	r3, #48	; 0x30
 8001b3e:	2b09      	cmp	r3, #9
 8001b40:	d94e      	bls.n	8001be0 <_vfiprintf_r+0x1c4>
 8001b42:	b1b0      	cbz	r0, 8001b72 <_vfiprintf_r+0x156>
 8001b44:	9207      	str	r2, [sp, #28]
 8001b46:	e014      	b.n	8001b72 <_vfiprintf_r+0x156>
 8001b48:	eba0 0308 	sub.w	r3, r0, r8
 8001b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	46a2      	mov	sl, r4
 8001b56:	e7d2      	b.n	8001afe <_vfiprintf_r+0xe2>
 8001b58:	9b03      	ldr	r3, [sp, #12]
 8001b5a:	1d19      	adds	r1, r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	9103      	str	r1, [sp, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bfbb      	ittet	lt
 8001b64:	425b      	neglt	r3, r3
 8001b66:	f042 0202 	orrlt.w	r2, r2, #2
 8001b6a:	9307      	strge	r3, [sp, #28]
 8001b6c:	9307      	strlt	r3, [sp, #28]
 8001b6e:	bfb8      	it	lt
 8001b70:	9204      	strlt	r2, [sp, #16]
 8001b72:	7823      	ldrb	r3, [r4, #0]
 8001b74:	2b2e      	cmp	r3, #46	; 0x2e
 8001b76:	d10c      	bne.n	8001b92 <_vfiprintf_r+0x176>
 8001b78:	7863      	ldrb	r3, [r4, #1]
 8001b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b7c:	d135      	bne.n	8001bea <_vfiprintf_r+0x1ce>
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	1d1a      	adds	r2, r3, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	9203      	str	r2, [sp, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bfb8      	it	lt
 8001b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b8e:	3402      	adds	r4, #2
 8001b90:	9305      	str	r3, [sp, #20]
 8001b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001c78 <_vfiprintf_r+0x25c>
 8001b96:	7821      	ldrb	r1, [r4, #0]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4650      	mov	r0, sl
 8001b9c:	f7fe fb18 	bl	80001d0 <memchr>
 8001ba0:	b140      	cbz	r0, 8001bb4 <_vfiprintf_r+0x198>
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	eba0 000a 	sub.w	r0, r0, sl
 8001ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8001bac:	9b04      	ldr	r3, [sp, #16]
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	3401      	adds	r4, #1
 8001bb2:	9304      	str	r3, [sp, #16]
 8001bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb8:	482c      	ldr	r0, [pc, #176]	; (8001c6c <_vfiprintf_r+0x250>)
 8001bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	f7fe fb06 	bl	80001d0 <memchr>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d03f      	beq.n	8001c48 <_vfiprintf_r+0x22c>
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <_vfiprintf_r+0x254>)
 8001bca:	bb1b      	cbnz	r3, 8001c14 <_vfiprintf_r+0x1f8>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	f023 0307 	bic.w	r3, r3, #7
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bda:	443b      	add	r3, r7
 8001bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bde:	e767      	b.n	8001ab0 <_vfiprintf_r+0x94>
 8001be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001be4:	460c      	mov	r4, r1
 8001be6:	2001      	movs	r0, #1
 8001be8:	e7a5      	b.n	8001b36 <_vfiprintf_r+0x11a>
 8001bea:	2300      	movs	r3, #0
 8001bec:	3401      	adds	r4, #1
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0c0a 	mov.w	ip, #10
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bfc:	3a30      	subs	r2, #48	; 0x30
 8001bfe:	2a09      	cmp	r2, #9
 8001c00:	d903      	bls.n	8001c0a <_vfiprintf_r+0x1ee>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0c5      	beq.n	8001b92 <_vfiprintf_r+0x176>
 8001c06:	9105      	str	r1, [sp, #20]
 8001c08:	e7c3      	b.n	8001b92 <_vfiprintf_r+0x176>
 8001c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c0e:	4604      	mov	r4, r0
 8001c10:	2301      	movs	r3, #1
 8001c12:	e7f0      	b.n	8001bf6 <_vfiprintf_r+0x1da>
 8001c14:	ab03      	add	r3, sp, #12
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <_vfiprintf_r+0x258>)
 8001c1c:	a904      	add	r1, sp, #16
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f3af 8000 	nop.w
 8001c24:	4607      	mov	r7, r0
 8001c26:	1c78      	adds	r0, r7, #1
 8001c28:	d1d6      	bne.n	8001bd8 <_vfiprintf_r+0x1bc>
 8001c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c2c:	07d9      	lsls	r1, r3, #31
 8001c2e:	d405      	bmi.n	8001c3c <_vfiprintf_r+0x220>
 8001c30:	89ab      	ldrh	r3, [r5, #12]
 8001c32:	059a      	lsls	r2, r3, #22
 8001c34:	d402      	bmi.n	8001c3c <_vfiprintf_r+0x220>
 8001c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c38:	f7ff fe31 	bl	800189e <__retarget_lock_release_recursive>
 8001c3c:	89ab      	ldrh	r3, [r5, #12]
 8001c3e:	065b      	lsls	r3, r3, #25
 8001c40:	f53f af12 	bmi.w	8001a68 <_vfiprintf_r+0x4c>
 8001c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c46:	e711      	b.n	8001a6c <_vfiprintf_r+0x50>
 8001c48:	ab03      	add	r3, sp, #12
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <_vfiprintf_r+0x258>)
 8001c50:	a904      	add	r1, sp, #16
 8001c52:	4630      	mov	r0, r6
 8001c54:	f000 f880 	bl	8001d58 <_printf_i>
 8001c58:	e7e4      	b.n	8001c24 <_vfiprintf_r+0x208>
 8001c5a:	bf00      	nop
 8001c5c:	08002628 	.word	0x08002628
 8001c60:	08002648 	.word	0x08002648
 8001c64:	08002608 	.word	0x08002608
 8001c68:	08002668 	.word	0x08002668
 8001c6c:	08002672 	.word	0x08002672
 8001c70:	00000000 	.word	0x00000000
 8001c74:	080019f7 	.word	0x080019f7
 8001c78:	0800266e 	.word	0x0800266e

08001c7c <_printf_common>:
 8001c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	4616      	mov	r6, r2
 8001c82:	4699      	mov	r9, r3
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	690b      	ldr	r3, [r1, #16]
 8001c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bfb8      	it	lt
 8001c90:	4613      	movlt	r3, r2
 8001c92:	6033      	str	r3, [r6, #0]
 8001c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c98:	4607      	mov	r7, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	b10a      	cbz	r2, 8001ca2 <_printf_common+0x26>
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	0699      	lsls	r1, r3, #26
 8001ca6:	bf42      	ittt	mi
 8001ca8:	6833      	ldrmi	r3, [r6, #0]
 8001caa:	3302      	addmi	r3, #2
 8001cac:	6033      	strmi	r3, [r6, #0]
 8001cae:	6825      	ldr	r5, [r4, #0]
 8001cb0:	f015 0506 	ands.w	r5, r5, #6
 8001cb4:	d106      	bne.n	8001cc4 <_printf_common+0x48>
 8001cb6:	f104 0a19 	add.w	sl, r4, #25
 8001cba:	68e3      	ldr	r3, [r4, #12]
 8001cbc:	6832      	ldr	r2, [r6, #0]
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	dc26      	bgt.n	8001d12 <_printf_common+0x96>
 8001cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cc8:	1e13      	subs	r3, r2, #0
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	bf18      	it	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	0692      	lsls	r2, r2, #26
 8001cd2:	d42b      	bmi.n	8001d2c <_printf_common+0xb0>
 8001cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cd8:	4649      	mov	r1, r9
 8001cda:	4638      	mov	r0, r7
 8001cdc:	47c0      	blx	r8
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d01e      	beq.n	8001d20 <_printf_common+0xa4>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	68e5      	ldr	r5, [r4, #12]
 8001ce6:	6832      	ldr	r2, [r6, #0]
 8001ce8:	f003 0306 	and.w	r3, r3, #6
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	bf08      	it	eq
 8001cf0:	1aad      	subeq	r5, r5, r2
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	6922      	ldr	r2, [r4, #16]
 8001cf6:	bf0c      	ite	eq
 8001cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cfc:	2500      	movne	r5, #0
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bfc4      	itt	gt
 8001d02:	1a9b      	subgt	r3, r3, r2
 8001d04:	18ed      	addgt	r5, r5, r3
 8001d06:	2600      	movs	r6, #0
 8001d08:	341a      	adds	r4, #26
 8001d0a:	42b5      	cmp	r5, r6
 8001d0c:	d11a      	bne.n	8001d44 <_printf_common+0xc8>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e008      	b.n	8001d24 <_printf_common+0xa8>
 8001d12:	2301      	movs	r3, #1
 8001d14:	4652      	mov	r2, sl
 8001d16:	4649      	mov	r1, r9
 8001d18:	4638      	mov	r0, r7
 8001d1a:	47c0      	blx	r8
 8001d1c:	3001      	adds	r0, #1
 8001d1e:	d103      	bne.n	8001d28 <_printf_common+0xac>
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7c6      	b.n	8001cba <_printf_common+0x3e>
 8001d2c:	18e1      	adds	r1, r4, r3
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	2030      	movs	r0, #48	; 0x30
 8001d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d36:	4422      	add	r2, r4
 8001d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d40:	3302      	adds	r3, #2
 8001d42:	e7c7      	b.n	8001cd4 <_printf_common+0x58>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4622      	mov	r2, r4
 8001d48:	4649      	mov	r1, r9
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	47c0      	blx	r8
 8001d4e:	3001      	adds	r0, #1
 8001d50:	d0e6      	beq.n	8001d20 <_printf_common+0xa4>
 8001d52:	3601      	adds	r6, #1
 8001d54:	e7d9      	b.n	8001d0a <_printf_common+0x8e>
	...

08001d58 <_printf_i>:
 8001d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d5c:	7e0f      	ldrb	r7, [r1, #24]
 8001d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d60:	2f78      	cmp	r7, #120	; 0x78
 8001d62:	4691      	mov	r9, r2
 8001d64:	4680      	mov	r8, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	469a      	mov	sl, r3
 8001d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d6e:	d807      	bhi.n	8001d80 <_printf_i+0x28>
 8001d70:	2f62      	cmp	r7, #98	; 0x62
 8001d72:	d80a      	bhi.n	8001d8a <_printf_i+0x32>
 8001d74:	2f00      	cmp	r7, #0
 8001d76:	f000 80d8 	beq.w	8001f2a <_printf_i+0x1d2>
 8001d7a:	2f58      	cmp	r7, #88	; 0x58
 8001d7c:	f000 80a3 	beq.w	8001ec6 <_printf_i+0x16e>
 8001d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d88:	e03a      	b.n	8001e00 <_printf_i+0xa8>
 8001d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d8e:	2b15      	cmp	r3, #21
 8001d90:	d8f6      	bhi.n	8001d80 <_printf_i+0x28>
 8001d92:	a101      	add	r1, pc, #4	; (adr r1, 8001d98 <_printf_i+0x40>)
 8001d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d98:	08001df1 	.word	0x08001df1
 8001d9c:	08001e05 	.word	0x08001e05
 8001da0:	08001d81 	.word	0x08001d81
 8001da4:	08001d81 	.word	0x08001d81
 8001da8:	08001d81 	.word	0x08001d81
 8001dac:	08001d81 	.word	0x08001d81
 8001db0:	08001e05 	.word	0x08001e05
 8001db4:	08001d81 	.word	0x08001d81
 8001db8:	08001d81 	.word	0x08001d81
 8001dbc:	08001d81 	.word	0x08001d81
 8001dc0:	08001d81 	.word	0x08001d81
 8001dc4:	08001f11 	.word	0x08001f11
 8001dc8:	08001e35 	.word	0x08001e35
 8001dcc:	08001ef3 	.word	0x08001ef3
 8001dd0:	08001d81 	.word	0x08001d81
 8001dd4:	08001d81 	.word	0x08001d81
 8001dd8:	08001f33 	.word	0x08001f33
 8001ddc:	08001d81 	.word	0x08001d81
 8001de0:	08001e35 	.word	0x08001e35
 8001de4:	08001d81 	.word	0x08001d81
 8001de8:	08001d81 	.word	0x08001d81
 8001dec:	08001efb 	.word	0x08001efb
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	602a      	str	r2, [r5, #0]
 8001df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0a3      	b.n	8001f4c <_printf_i+0x1f4>
 8001e04:	6820      	ldr	r0, [r4, #0]
 8001e06:	6829      	ldr	r1, [r5, #0]
 8001e08:	0606      	lsls	r6, r0, #24
 8001e0a:	f101 0304 	add.w	r3, r1, #4
 8001e0e:	d50a      	bpl.n	8001e26 <_printf_i+0xce>
 8001e10:	680e      	ldr	r6, [r1, #0]
 8001e12:	602b      	str	r3, [r5, #0]
 8001e14:	2e00      	cmp	r6, #0
 8001e16:	da03      	bge.n	8001e20 <_printf_i+0xc8>
 8001e18:	232d      	movs	r3, #45	; 0x2d
 8001e1a:	4276      	negs	r6, r6
 8001e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e20:	485e      	ldr	r0, [pc, #376]	; (8001f9c <_printf_i+0x244>)
 8001e22:	230a      	movs	r3, #10
 8001e24:	e019      	b.n	8001e5a <_printf_i+0x102>
 8001e26:	680e      	ldr	r6, [r1, #0]
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e2e:	bf18      	it	ne
 8001e30:	b236      	sxthne	r6, r6
 8001e32:	e7ef      	b.n	8001e14 <_printf_i+0xbc>
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	1d19      	adds	r1, r3, #4
 8001e3a:	6029      	str	r1, [r5, #0]
 8001e3c:	0601      	lsls	r1, r0, #24
 8001e3e:	d501      	bpl.n	8001e44 <_printf_i+0xec>
 8001e40:	681e      	ldr	r6, [r3, #0]
 8001e42:	e002      	b.n	8001e4a <_printf_i+0xf2>
 8001e44:	0646      	lsls	r6, r0, #25
 8001e46:	d5fb      	bpl.n	8001e40 <_printf_i+0xe8>
 8001e48:	881e      	ldrh	r6, [r3, #0]
 8001e4a:	4854      	ldr	r0, [pc, #336]	; (8001f9c <_printf_i+0x244>)
 8001e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8001e4e:	bf0c      	ite	eq
 8001e50:	2308      	moveq	r3, #8
 8001e52:	230a      	movne	r3, #10
 8001e54:	2100      	movs	r1, #0
 8001e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e5a:	6865      	ldr	r5, [r4, #4]
 8001e5c:	60a5      	str	r5, [r4, #8]
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	bfa2      	ittt	ge
 8001e62:	6821      	ldrge	r1, [r4, #0]
 8001e64:	f021 0104 	bicge.w	r1, r1, #4
 8001e68:	6021      	strge	r1, [r4, #0]
 8001e6a:	b90e      	cbnz	r6, 8001e70 <_printf_i+0x118>
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d04d      	beq.n	8001f0c <_printf_i+0x1b4>
 8001e70:	4615      	mov	r5, r2
 8001e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e76:	fb03 6711 	mls	r7, r3, r1, r6
 8001e7a:	5dc7      	ldrb	r7, [r0, r7]
 8001e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e80:	4637      	mov	r7, r6
 8001e82:	42bb      	cmp	r3, r7
 8001e84:	460e      	mov	r6, r1
 8001e86:	d9f4      	bls.n	8001e72 <_printf_i+0x11a>
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d10b      	bne.n	8001ea4 <_printf_i+0x14c>
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	07de      	lsls	r6, r3, #31
 8001e90:	d508      	bpl.n	8001ea4 <_printf_i+0x14c>
 8001e92:	6923      	ldr	r3, [r4, #16]
 8001e94:	6861      	ldr	r1, [r4, #4]
 8001e96:	4299      	cmp	r1, r3
 8001e98:	bfde      	ittt	le
 8001e9a:	2330      	movle	r3, #48	; 0x30
 8001e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ea4:	1b52      	subs	r2, r2, r5
 8001ea6:	6122      	str	r2, [r4, #16]
 8001ea8:	f8cd a000 	str.w	sl, [sp]
 8001eac:	464b      	mov	r3, r9
 8001eae:	aa03      	add	r2, sp, #12
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f7ff fee2 	bl	8001c7c <_printf_common>
 8001eb8:	3001      	adds	r0, #1
 8001eba:	d14c      	bne.n	8001f56 <_printf_i+0x1fe>
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	b004      	add	sp, #16
 8001ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec6:	4835      	ldr	r0, [pc, #212]	; (8001f9c <_printf_i+0x244>)
 8001ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ecc:	6829      	ldr	r1, [r5, #0]
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ed4:	6029      	str	r1, [r5, #0]
 8001ed6:	061d      	lsls	r5, r3, #24
 8001ed8:	d514      	bpl.n	8001f04 <_printf_i+0x1ac>
 8001eda:	07df      	lsls	r7, r3, #31
 8001edc:	bf44      	itt	mi
 8001ede:	f043 0320 	orrmi.w	r3, r3, #32
 8001ee2:	6023      	strmi	r3, [r4, #0]
 8001ee4:	b91e      	cbnz	r6, 8001eee <_printf_i+0x196>
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	f023 0320 	bic.w	r3, r3, #32
 8001eec:	6023      	str	r3, [r4, #0]
 8001eee:	2310      	movs	r3, #16
 8001ef0:	e7b0      	b.n	8001e54 <_printf_i+0xfc>
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	f043 0320 	orr.w	r3, r3, #32
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	2378      	movs	r3, #120	; 0x78
 8001efc:	4828      	ldr	r0, [pc, #160]	; (8001fa0 <_printf_i+0x248>)
 8001efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f02:	e7e3      	b.n	8001ecc <_printf_i+0x174>
 8001f04:	0659      	lsls	r1, r3, #25
 8001f06:	bf48      	it	mi
 8001f08:	b2b6      	uxthmi	r6, r6
 8001f0a:	e7e6      	b.n	8001eda <_printf_i+0x182>
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	e7bb      	b.n	8001e88 <_printf_i+0x130>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	6826      	ldr	r6, [r4, #0]
 8001f14:	6961      	ldr	r1, [r4, #20]
 8001f16:	1d18      	adds	r0, r3, #4
 8001f18:	6028      	str	r0, [r5, #0]
 8001f1a:	0635      	lsls	r5, r6, #24
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	d501      	bpl.n	8001f24 <_printf_i+0x1cc>
 8001f20:	6019      	str	r1, [r3, #0]
 8001f22:	e002      	b.n	8001f2a <_printf_i+0x1d2>
 8001f24:	0670      	lsls	r0, r6, #25
 8001f26:	d5fb      	bpl.n	8001f20 <_printf_i+0x1c8>
 8001f28:	8019      	strh	r1, [r3, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6123      	str	r3, [r4, #16]
 8001f2e:	4615      	mov	r5, r2
 8001f30:	e7ba      	b.n	8001ea8 <_printf_i+0x150>
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	1d1a      	adds	r2, r3, #4
 8001f36:	602a      	str	r2, [r5, #0]
 8001f38:	681d      	ldr	r5, [r3, #0]
 8001f3a:	6862      	ldr	r2, [r4, #4]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f7fe f946 	bl	80001d0 <memchr>
 8001f44:	b108      	cbz	r0, 8001f4a <_printf_i+0x1f2>
 8001f46:	1b40      	subs	r0, r0, r5
 8001f48:	6060      	str	r0, [r4, #4]
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	6123      	str	r3, [r4, #16]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f54:	e7a8      	b.n	8001ea8 <_printf_i+0x150>
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	462a      	mov	r2, r5
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	4640      	mov	r0, r8
 8001f5e:	47d0      	blx	sl
 8001f60:	3001      	adds	r0, #1
 8001f62:	d0ab      	beq.n	8001ebc <_printf_i+0x164>
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	079b      	lsls	r3, r3, #30
 8001f68:	d413      	bmi.n	8001f92 <_printf_i+0x23a>
 8001f6a:	68e0      	ldr	r0, [r4, #12]
 8001f6c:	9b03      	ldr	r3, [sp, #12]
 8001f6e:	4298      	cmp	r0, r3
 8001f70:	bfb8      	it	lt
 8001f72:	4618      	movlt	r0, r3
 8001f74:	e7a4      	b.n	8001ec0 <_printf_i+0x168>
 8001f76:	2301      	movs	r3, #1
 8001f78:	4632      	mov	r2, r6
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	47d0      	blx	sl
 8001f80:	3001      	adds	r0, #1
 8001f82:	d09b      	beq.n	8001ebc <_printf_i+0x164>
 8001f84:	3501      	adds	r5, #1
 8001f86:	68e3      	ldr	r3, [r4, #12]
 8001f88:	9903      	ldr	r1, [sp, #12]
 8001f8a:	1a5b      	subs	r3, r3, r1
 8001f8c:	42ab      	cmp	r3, r5
 8001f8e:	dcf2      	bgt.n	8001f76 <_printf_i+0x21e>
 8001f90:	e7eb      	b.n	8001f6a <_printf_i+0x212>
 8001f92:	2500      	movs	r5, #0
 8001f94:	f104 0619 	add.w	r6, r4, #25
 8001f98:	e7f5      	b.n	8001f86 <_printf_i+0x22e>
 8001f9a:	bf00      	nop
 8001f9c:	08002679 	.word	0x08002679
 8001fa0:	0800268a 	.word	0x0800268a

08001fa4 <_sbrk_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4d06      	ldr	r5, [pc, #24]	; (8001fc0 <_sbrk_r+0x1c>)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4604      	mov	r4, r0
 8001fac:	4608      	mov	r0, r1
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	f7fe faae 	bl	8000510 <_sbrk>
 8001fb4:	1c43      	adds	r3, r0, #1
 8001fb6:	d102      	bne.n	8001fbe <_sbrk_r+0x1a>
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	b103      	cbz	r3, 8001fbe <_sbrk_r+0x1a>
 8001fbc:	6023      	str	r3, [r4, #0]
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}
 8001fc0:	200000a4 	.word	0x200000a4

08001fc4 <__sread>:
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fcc:	f000 fab2 	bl	8002534 <_read_r>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	bfab      	itete	ge
 8001fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8001fd8:	181b      	addge	r3, r3, r0
 8001fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fde:	bfac      	ite	ge
 8001fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fe2:	81a3      	strhlt	r3, [r4, #12]
 8001fe4:	bd10      	pop	{r4, pc}

08001fe6 <__swrite>:
 8001fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fea:	461f      	mov	r7, r3
 8001fec:	898b      	ldrh	r3, [r1, #12]
 8001fee:	05db      	lsls	r3, r3, #23
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	4616      	mov	r6, r2
 8001ff6:	d505      	bpl.n	8002004 <__swrite+0x1e>
 8001ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2200      	movs	r2, #0
 8002000:	f000 f9c8 	bl	8002394 <_lseek_r>
 8002004:	89a3      	ldrh	r3, [r4, #12]
 8002006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800200a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800200e:	81a3      	strh	r3, [r4, #12]
 8002010:	4632      	mov	r2, r6
 8002012:	463b      	mov	r3, r7
 8002014:	4628      	mov	r0, r5
 8002016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800201a:	f000 b869 	b.w	80020f0 <_write_r>

0800201e <__sseek>:
 800201e:	b510      	push	{r4, lr}
 8002020:	460c      	mov	r4, r1
 8002022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002026:	f000 f9b5 	bl	8002394 <_lseek_r>
 800202a:	1c43      	adds	r3, r0, #1
 800202c:	89a3      	ldrh	r3, [r4, #12]
 800202e:	bf15      	itete	ne
 8002030:	6560      	strne	r0, [r4, #84]	; 0x54
 8002032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800203a:	81a3      	strheq	r3, [r4, #12]
 800203c:	bf18      	it	ne
 800203e:	81a3      	strhne	r3, [r4, #12]
 8002040:	bd10      	pop	{r4, pc}

08002042 <__sclose>:
 8002042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002046:	f000 b8d3 	b.w	80021f0 <_close_r>
	...

0800204c <__swbuf_r>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	460e      	mov	r6, r1
 8002050:	4614      	mov	r4, r2
 8002052:	4605      	mov	r5, r0
 8002054:	b118      	cbz	r0, 800205e <__swbuf_r+0x12>
 8002056:	6983      	ldr	r3, [r0, #24]
 8002058:	b90b      	cbnz	r3, 800205e <__swbuf_r+0x12>
 800205a:	f7ff fb81 	bl	8001760 <__sinit>
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <__swbuf_r+0x98>)
 8002060:	429c      	cmp	r4, r3
 8002062:	d12b      	bne.n	80020bc <__swbuf_r+0x70>
 8002064:	686c      	ldr	r4, [r5, #4]
 8002066:	69a3      	ldr	r3, [r4, #24]
 8002068:	60a3      	str	r3, [r4, #8]
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	071a      	lsls	r2, r3, #28
 800206e:	d52f      	bpl.n	80020d0 <__swbuf_r+0x84>
 8002070:	6923      	ldr	r3, [r4, #16]
 8002072:	b36b      	cbz	r3, 80020d0 <__swbuf_r+0x84>
 8002074:	6923      	ldr	r3, [r4, #16]
 8002076:	6820      	ldr	r0, [r4, #0]
 8002078:	1ac0      	subs	r0, r0, r3
 800207a:	6963      	ldr	r3, [r4, #20]
 800207c:	b2f6      	uxtb	r6, r6
 800207e:	4283      	cmp	r3, r0
 8002080:	4637      	mov	r7, r6
 8002082:	dc04      	bgt.n	800208e <__swbuf_r+0x42>
 8002084:	4621      	mov	r1, r4
 8002086:	4628      	mov	r0, r5
 8002088:	f000 f948 	bl	800231c <_fflush_r>
 800208c:	bb30      	cbnz	r0, 80020dc <__swbuf_r+0x90>
 800208e:	68a3      	ldr	r3, [r4, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60a3      	str	r3, [r4, #8]
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	6022      	str	r2, [r4, #0]
 800209a:	701e      	strb	r6, [r3, #0]
 800209c:	6963      	ldr	r3, [r4, #20]
 800209e:	3001      	adds	r0, #1
 80020a0:	4283      	cmp	r3, r0
 80020a2:	d004      	beq.n	80020ae <__swbuf_r+0x62>
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	07db      	lsls	r3, r3, #31
 80020a8:	d506      	bpl.n	80020b8 <__swbuf_r+0x6c>
 80020aa:	2e0a      	cmp	r6, #10
 80020ac:	d104      	bne.n	80020b8 <__swbuf_r+0x6c>
 80020ae:	4621      	mov	r1, r4
 80020b0:	4628      	mov	r0, r5
 80020b2:	f000 f933 	bl	800231c <_fflush_r>
 80020b6:	b988      	cbnz	r0, 80020dc <__swbuf_r+0x90>
 80020b8:	4638      	mov	r0, r7
 80020ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <__swbuf_r+0x9c>)
 80020be:	429c      	cmp	r4, r3
 80020c0:	d101      	bne.n	80020c6 <__swbuf_r+0x7a>
 80020c2:	68ac      	ldr	r4, [r5, #8]
 80020c4:	e7cf      	b.n	8002066 <__swbuf_r+0x1a>
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <__swbuf_r+0xa0>)
 80020c8:	429c      	cmp	r4, r3
 80020ca:	bf08      	it	eq
 80020cc:	68ec      	ldreq	r4, [r5, #12]
 80020ce:	e7ca      	b.n	8002066 <__swbuf_r+0x1a>
 80020d0:	4621      	mov	r1, r4
 80020d2:	4628      	mov	r0, r5
 80020d4:	f000 f81e 	bl	8002114 <__swsetup_r>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d0cb      	beq.n	8002074 <__swbuf_r+0x28>
 80020dc:	f04f 37ff 	mov.w	r7, #4294967295
 80020e0:	e7ea      	b.n	80020b8 <__swbuf_r+0x6c>
 80020e2:	bf00      	nop
 80020e4:	08002628 	.word	0x08002628
 80020e8:	08002648 	.word	0x08002648
 80020ec:	08002608 	.word	0x08002608

080020f0 <_write_r>:
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4d07      	ldr	r5, [pc, #28]	; (8002110 <_write_r+0x20>)
 80020f4:	4604      	mov	r4, r0
 80020f6:	4608      	mov	r0, r1
 80020f8:	4611      	mov	r1, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	602a      	str	r2, [r5, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7fe f8dd 	bl	80002be <_write>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d102      	bne.n	800210e <_write_r+0x1e>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b103      	cbz	r3, 800210e <_write_r+0x1e>
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	200000a4 	.word	0x200000a4

08002114 <__swsetup_r>:
 8002114:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <__swsetup_r+0xcc>)
 8002116:	b570      	push	{r4, r5, r6, lr}
 8002118:	681d      	ldr	r5, [r3, #0]
 800211a:	4606      	mov	r6, r0
 800211c:	460c      	mov	r4, r1
 800211e:	b125      	cbz	r5, 800212a <__swsetup_r+0x16>
 8002120:	69ab      	ldr	r3, [r5, #24]
 8002122:	b913      	cbnz	r3, 800212a <__swsetup_r+0x16>
 8002124:	4628      	mov	r0, r5
 8002126:	f7ff fb1b 	bl	8001760 <__sinit>
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <__swsetup_r+0xd0>)
 800212c:	429c      	cmp	r4, r3
 800212e:	d10f      	bne.n	8002150 <__swsetup_r+0x3c>
 8002130:	686c      	ldr	r4, [r5, #4]
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002138:	0719      	lsls	r1, r3, #28
 800213a:	d42c      	bmi.n	8002196 <__swsetup_r+0x82>
 800213c:	06dd      	lsls	r5, r3, #27
 800213e:	d411      	bmi.n	8002164 <__swsetup_r+0x50>
 8002140:	2309      	movs	r3, #9
 8002142:	6033      	str	r3, [r6, #0]
 8002144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	f04f 30ff 	mov.w	r0, #4294967295
 800214e:	e03e      	b.n	80021ce <__swsetup_r+0xba>
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <__swsetup_r+0xd4>)
 8002152:	429c      	cmp	r4, r3
 8002154:	d101      	bne.n	800215a <__swsetup_r+0x46>
 8002156:	68ac      	ldr	r4, [r5, #8]
 8002158:	e7eb      	b.n	8002132 <__swsetup_r+0x1e>
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <__swsetup_r+0xd8>)
 800215c:	429c      	cmp	r4, r3
 800215e:	bf08      	it	eq
 8002160:	68ec      	ldreq	r4, [r5, #12]
 8002162:	e7e6      	b.n	8002132 <__swsetup_r+0x1e>
 8002164:	0758      	lsls	r0, r3, #29
 8002166:	d512      	bpl.n	800218e <__swsetup_r+0x7a>
 8002168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800216a:	b141      	cbz	r1, 800217e <__swsetup_r+0x6a>
 800216c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002170:	4299      	cmp	r1, r3
 8002172:	d002      	beq.n	800217a <__swsetup_r+0x66>
 8002174:	4630      	mov	r0, r6
 8002176:	f000 f991 	bl	800249c <_free_r>
 800217a:	2300      	movs	r3, #0
 800217c:	6363      	str	r3, [r4, #52]	; 0x34
 800217e:	89a3      	ldrh	r3, [r4, #12]
 8002180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002184:	81a3      	strh	r3, [r4, #12]
 8002186:	2300      	movs	r3, #0
 8002188:	6063      	str	r3, [r4, #4]
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	81a3      	strh	r3, [r4, #12]
 8002196:	6923      	ldr	r3, [r4, #16]
 8002198:	b94b      	cbnz	r3, 80021ae <__swsetup_r+0x9a>
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a4:	d003      	beq.n	80021ae <__swsetup_r+0x9a>
 80021a6:	4621      	mov	r1, r4
 80021a8:	4630      	mov	r0, r6
 80021aa:	f000 f92b 	bl	8002404 <__smakebuf_r>
 80021ae:	89a0      	ldrh	r0, [r4, #12]
 80021b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021b4:	f010 0301 	ands.w	r3, r0, #1
 80021b8:	d00a      	beq.n	80021d0 <__swsetup_r+0xbc>
 80021ba:	2300      	movs	r3, #0
 80021bc:	60a3      	str	r3, [r4, #8]
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	425b      	negs	r3, r3
 80021c2:	61a3      	str	r3, [r4, #24]
 80021c4:	6923      	ldr	r3, [r4, #16]
 80021c6:	b943      	cbnz	r3, 80021da <__swsetup_r+0xc6>
 80021c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021cc:	d1ba      	bne.n	8002144 <__swsetup_r+0x30>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	0781      	lsls	r1, r0, #30
 80021d2:	bf58      	it	pl
 80021d4:	6963      	ldrpl	r3, [r4, #20]
 80021d6:	60a3      	str	r3, [r4, #8]
 80021d8:	e7f4      	b.n	80021c4 <__swsetup_r+0xb0>
 80021da:	2000      	movs	r0, #0
 80021dc:	e7f7      	b.n	80021ce <__swsetup_r+0xba>
 80021de:	bf00      	nop
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	08002628 	.word	0x08002628
 80021e8:	08002648 	.word	0x08002648
 80021ec:	08002608 	.word	0x08002608

080021f0 <_close_r>:
 80021f0:	b538      	push	{r3, r4, r5, lr}
 80021f2:	4d06      	ldr	r5, [pc, #24]	; (800220c <_close_r+0x1c>)
 80021f4:	2300      	movs	r3, #0
 80021f6:	4604      	mov	r4, r0
 80021f8:	4608      	mov	r0, r1
 80021fa:	602b      	str	r3, [r5, #0]
 80021fc:	f7fe f953 	bl	80004a6 <_close>
 8002200:	1c43      	adds	r3, r0, #1
 8002202:	d102      	bne.n	800220a <_close_r+0x1a>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	b103      	cbz	r3, 800220a <_close_r+0x1a>
 8002208:	6023      	str	r3, [r4, #0]
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	200000a4 	.word	0x200000a4

08002210 <__sflush_r>:
 8002210:	898a      	ldrh	r2, [r1, #12]
 8002212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002216:	4605      	mov	r5, r0
 8002218:	0710      	lsls	r0, r2, #28
 800221a:	460c      	mov	r4, r1
 800221c:	d458      	bmi.n	80022d0 <__sflush_r+0xc0>
 800221e:	684b      	ldr	r3, [r1, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	dc05      	bgt.n	8002230 <__sflush_r+0x20>
 8002224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	dc02      	bgt.n	8002230 <__sflush_r+0x20>
 800222a:	2000      	movs	r0, #0
 800222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002232:	2e00      	cmp	r6, #0
 8002234:	d0f9      	beq.n	800222a <__sflush_r+0x1a>
 8002236:	2300      	movs	r3, #0
 8002238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800223c:	682f      	ldr	r7, [r5, #0]
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	d032      	beq.n	80022a8 <__sflush_r+0x98>
 8002242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002244:	89a3      	ldrh	r3, [r4, #12]
 8002246:	075a      	lsls	r2, r3, #29
 8002248:	d505      	bpl.n	8002256 <__sflush_r+0x46>
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	1ac0      	subs	r0, r0, r3
 800224e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002250:	b10b      	cbz	r3, 8002256 <__sflush_r+0x46>
 8002252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002254:	1ac0      	subs	r0, r0, r3
 8002256:	2300      	movs	r3, #0
 8002258:	4602      	mov	r2, r0
 800225a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800225c:	6a21      	ldr	r1, [r4, #32]
 800225e:	4628      	mov	r0, r5
 8002260:	47b0      	blx	r6
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	d106      	bne.n	8002276 <__sflush_r+0x66>
 8002268:	6829      	ldr	r1, [r5, #0]
 800226a:	291d      	cmp	r1, #29
 800226c:	d82c      	bhi.n	80022c8 <__sflush_r+0xb8>
 800226e:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <__sflush_r+0x108>)
 8002270:	40ca      	lsrs	r2, r1
 8002272:	07d6      	lsls	r6, r2, #31
 8002274:	d528      	bpl.n	80022c8 <__sflush_r+0xb8>
 8002276:	2200      	movs	r2, #0
 8002278:	6062      	str	r2, [r4, #4]
 800227a:	04d9      	lsls	r1, r3, #19
 800227c:	6922      	ldr	r2, [r4, #16]
 800227e:	6022      	str	r2, [r4, #0]
 8002280:	d504      	bpl.n	800228c <__sflush_r+0x7c>
 8002282:	1c42      	adds	r2, r0, #1
 8002284:	d101      	bne.n	800228a <__sflush_r+0x7a>
 8002286:	682b      	ldr	r3, [r5, #0]
 8002288:	b903      	cbnz	r3, 800228c <__sflush_r+0x7c>
 800228a:	6560      	str	r0, [r4, #84]	; 0x54
 800228c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800228e:	602f      	str	r7, [r5, #0]
 8002290:	2900      	cmp	r1, #0
 8002292:	d0ca      	beq.n	800222a <__sflush_r+0x1a>
 8002294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002298:	4299      	cmp	r1, r3
 800229a:	d002      	beq.n	80022a2 <__sflush_r+0x92>
 800229c:	4628      	mov	r0, r5
 800229e:	f000 f8fd 	bl	800249c <_free_r>
 80022a2:	2000      	movs	r0, #0
 80022a4:	6360      	str	r0, [r4, #52]	; 0x34
 80022a6:	e7c1      	b.n	800222c <__sflush_r+0x1c>
 80022a8:	6a21      	ldr	r1, [r4, #32]
 80022aa:	2301      	movs	r3, #1
 80022ac:	4628      	mov	r0, r5
 80022ae:	47b0      	blx	r6
 80022b0:	1c41      	adds	r1, r0, #1
 80022b2:	d1c7      	bne.n	8002244 <__sflush_r+0x34>
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0c4      	beq.n	8002244 <__sflush_r+0x34>
 80022ba:	2b1d      	cmp	r3, #29
 80022bc:	d001      	beq.n	80022c2 <__sflush_r+0xb2>
 80022be:	2b16      	cmp	r3, #22
 80022c0:	d101      	bne.n	80022c6 <__sflush_r+0xb6>
 80022c2:	602f      	str	r7, [r5, #0]
 80022c4:	e7b1      	b.n	800222a <__sflush_r+0x1a>
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	81a3      	strh	r3, [r4, #12]
 80022ce:	e7ad      	b.n	800222c <__sflush_r+0x1c>
 80022d0:	690f      	ldr	r7, [r1, #16]
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d0a9      	beq.n	800222a <__sflush_r+0x1a>
 80022d6:	0793      	lsls	r3, r2, #30
 80022d8:	680e      	ldr	r6, [r1, #0]
 80022da:	bf08      	it	eq
 80022dc:	694b      	ldreq	r3, [r1, #20]
 80022de:	600f      	str	r7, [r1, #0]
 80022e0:	bf18      	it	ne
 80022e2:	2300      	movne	r3, #0
 80022e4:	eba6 0807 	sub.w	r8, r6, r7
 80022e8:	608b      	str	r3, [r1, #8]
 80022ea:	f1b8 0f00 	cmp.w	r8, #0
 80022ee:	dd9c      	ble.n	800222a <__sflush_r+0x1a>
 80022f0:	6a21      	ldr	r1, [r4, #32]
 80022f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022f4:	4643      	mov	r3, r8
 80022f6:	463a      	mov	r2, r7
 80022f8:	4628      	mov	r0, r5
 80022fa:	47b0      	blx	r6
 80022fc:	2800      	cmp	r0, #0
 80022fe:	dc06      	bgt.n	800230e <__sflush_r+0xfe>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002306:	81a3      	strh	r3, [r4, #12]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	e78e      	b.n	800222c <__sflush_r+0x1c>
 800230e:	4407      	add	r7, r0
 8002310:	eba8 0800 	sub.w	r8, r8, r0
 8002314:	e7e9      	b.n	80022ea <__sflush_r+0xda>
 8002316:	bf00      	nop
 8002318:	20400001 	.word	0x20400001

0800231c <_fflush_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	690b      	ldr	r3, [r1, #16]
 8002320:	4605      	mov	r5, r0
 8002322:	460c      	mov	r4, r1
 8002324:	b913      	cbnz	r3, 800232c <_fflush_r+0x10>
 8002326:	2500      	movs	r5, #0
 8002328:	4628      	mov	r0, r5
 800232a:	bd38      	pop	{r3, r4, r5, pc}
 800232c:	b118      	cbz	r0, 8002336 <_fflush_r+0x1a>
 800232e:	6983      	ldr	r3, [r0, #24]
 8002330:	b90b      	cbnz	r3, 8002336 <_fflush_r+0x1a>
 8002332:	f7ff fa15 	bl	8001760 <__sinit>
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <_fflush_r+0x6c>)
 8002338:	429c      	cmp	r4, r3
 800233a:	d11b      	bne.n	8002374 <_fflush_r+0x58>
 800233c:	686c      	ldr	r4, [r5, #4]
 800233e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ef      	beq.n	8002326 <_fflush_r+0xa>
 8002346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002348:	07d0      	lsls	r0, r2, #31
 800234a:	d404      	bmi.n	8002356 <_fflush_r+0x3a>
 800234c:	0599      	lsls	r1, r3, #22
 800234e:	d402      	bmi.n	8002356 <_fflush_r+0x3a>
 8002350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002352:	f7ff faa3 	bl	800189c <__retarget_lock_acquire_recursive>
 8002356:	4628      	mov	r0, r5
 8002358:	4621      	mov	r1, r4
 800235a:	f7ff ff59 	bl	8002210 <__sflush_r>
 800235e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002360:	07da      	lsls	r2, r3, #31
 8002362:	4605      	mov	r5, r0
 8002364:	d4e0      	bmi.n	8002328 <_fflush_r+0xc>
 8002366:	89a3      	ldrh	r3, [r4, #12]
 8002368:	059b      	lsls	r3, r3, #22
 800236a:	d4dd      	bmi.n	8002328 <_fflush_r+0xc>
 800236c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800236e:	f7ff fa96 	bl	800189e <__retarget_lock_release_recursive>
 8002372:	e7d9      	b.n	8002328 <_fflush_r+0xc>
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <_fflush_r+0x70>)
 8002376:	429c      	cmp	r4, r3
 8002378:	d101      	bne.n	800237e <_fflush_r+0x62>
 800237a:	68ac      	ldr	r4, [r5, #8]
 800237c:	e7df      	b.n	800233e <_fflush_r+0x22>
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <_fflush_r+0x74>)
 8002380:	429c      	cmp	r4, r3
 8002382:	bf08      	it	eq
 8002384:	68ec      	ldreq	r4, [r5, #12]
 8002386:	e7da      	b.n	800233e <_fflush_r+0x22>
 8002388:	08002628 	.word	0x08002628
 800238c:	08002648 	.word	0x08002648
 8002390:	08002608 	.word	0x08002608

08002394 <_lseek_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d07      	ldr	r5, [pc, #28]	; (80023b4 <_lseek_r+0x20>)
 8002398:	4604      	mov	r4, r0
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	602a      	str	r2, [r5, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f7fe f8a6 	bl	80004f4 <_lseek>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_lseek_r+0x1e>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_lseek_r+0x1e>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	200000a4 	.word	0x200000a4

080023b8 <__swhatbuf_r>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	460e      	mov	r6, r1
 80023bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c0:	2900      	cmp	r1, #0
 80023c2:	b096      	sub	sp, #88	; 0x58
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	da08      	bge.n	80023dc <__swhatbuf_r+0x24>
 80023ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	061a      	lsls	r2, r3, #24
 80023d4:	d410      	bmi.n	80023f8 <__swhatbuf_r+0x40>
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	e00e      	b.n	80023fa <__swhatbuf_r+0x42>
 80023dc:	466a      	mov	r2, sp
 80023de:	f000 f8bb 	bl	8002558 <_fstat_r>
 80023e2:	2800      	cmp	r0, #0
 80023e4:	dbf1      	blt.n	80023ca <__swhatbuf_r+0x12>
 80023e6:	9a01      	ldr	r2, [sp, #4]
 80023e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80023ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80023f0:	425a      	negs	r2, r3
 80023f2:	415a      	adcs	r2, r3
 80023f4:	602a      	str	r2, [r5, #0]
 80023f6:	e7ee      	b.n	80023d6 <__swhatbuf_r+0x1e>
 80023f8:	2340      	movs	r3, #64	; 0x40
 80023fa:	2000      	movs	r0, #0
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	b016      	add	sp, #88	; 0x58
 8002400:	bd70      	pop	{r4, r5, r6, pc}
	...

08002404 <__smakebuf_r>:
 8002404:	898b      	ldrh	r3, [r1, #12]
 8002406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002408:	079d      	lsls	r5, r3, #30
 800240a:	4606      	mov	r6, r0
 800240c:	460c      	mov	r4, r1
 800240e:	d507      	bpl.n	8002420 <__smakebuf_r+0x1c>
 8002410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	6123      	str	r3, [r4, #16]
 8002418:	2301      	movs	r3, #1
 800241a:	6163      	str	r3, [r4, #20]
 800241c:	b002      	add	sp, #8
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	ab01      	add	r3, sp, #4
 8002422:	466a      	mov	r2, sp
 8002424:	f7ff ffc8 	bl	80023b8 <__swhatbuf_r>
 8002428:	9900      	ldr	r1, [sp, #0]
 800242a:	4605      	mov	r5, r0
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff fa57 	bl	80018e0 <_malloc_r>
 8002432:	b948      	cbnz	r0, 8002448 <__smakebuf_r+0x44>
 8002434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002438:	059a      	lsls	r2, r3, #22
 800243a:	d4ef      	bmi.n	800241c <__smakebuf_r+0x18>
 800243c:	f023 0303 	bic.w	r3, r3, #3
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	e7e3      	b.n	8002410 <__smakebuf_r+0xc>
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <__smakebuf_r+0x7c>)
 800244a:	62b3      	str	r3, [r6, #40]	; 0x28
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	6020      	str	r0, [r4, #0]
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	81a3      	strh	r3, [r4, #12]
 8002456:	9b00      	ldr	r3, [sp, #0]
 8002458:	6163      	str	r3, [r4, #20]
 800245a:	9b01      	ldr	r3, [sp, #4]
 800245c:	6120      	str	r0, [r4, #16]
 800245e:	b15b      	cbz	r3, 8002478 <__smakebuf_r+0x74>
 8002460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002464:	4630      	mov	r0, r6
 8002466:	f000 f889 	bl	800257c <_isatty_r>
 800246a:	b128      	cbz	r0, 8002478 <__smakebuf_r+0x74>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	89a0      	ldrh	r0, [r4, #12]
 800247a:	4305      	orrs	r5, r0
 800247c:	81a5      	strh	r5, [r4, #12]
 800247e:	e7cd      	b.n	800241c <__smakebuf_r+0x18>
 8002480:	080016f9 	.word	0x080016f9

08002484 <__malloc_lock>:
 8002484:	4801      	ldr	r0, [pc, #4]	; (800248c <__malloc_lock+0x8>)
 8002486:	f7ff ba09 	b.w	800189c <__retarget_lock_acquire_recursive>
 800248a:	bf00      	nop
 800248c:	20000098 	.word	0x20000098

08002490 <__malloc_unlock>:
 8002490:	4801      	ldr	r0, [pc, #4]	; (8002498 <__malloc_unlock+0x8>)
 8002492:	f7ff ba04 	b.w	800189e <__retarget_lock_release_recursive>
 8002496:	bf00      	nop
 8002498:	20000098 	.word	0x20000098

0800249c <_free_r>:
 800249c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800249e:	2900      	cmp	r1, #0
 80024a0:	d044      	beq.n	800252c <_free_r+0x90>
 80024a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024a6:	9001      	str	r0, [sp, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f1a1 0404 	sub.w	r4, r1, #4
 80024ae:	bfb8      	it	lt
 80024b0:	18e4      	addlt	r4, r4, r3
 80024b2:	f7ff ffe7 	bl	8002484 <__malloc_lock>
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <_free_r+0x94>)
 80024b8:	9801      	ldr	r0, [sp, #4]
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	b933      	cbnz	r3, 80024cc <_free_r+0x30>
 80024be:	6063      	str	r3, [r4, #4]
 80024c0:	6014      	str	r4, [r2, #0]
 80024c2:	b003      	add	sp, #12
 80024c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024c8:	f7ff bfe2 	b.w	8002490 <__malloc_unlock>
 80024cc:	42a3      	cmp	r3, r4
 80024ce:	d908      	bls.n	80024e2 <_free_r+0x46>
 80024d0:	6825      	ldr	r5, [r4, #0]
 80024d2:	1961      	adds	r1, r4, r5
 80024d4:	428b      	cmp	r3, r1
 80024d6:	bf01      	itttt	eq
 80024d8:	6819      	ldreq	r1, [r3, #0]
 80024da:	685b      	ldreq	r3, [r3, #4]
 80024dc:	1949      	addeq	r1, r1, r5
 80024de:	6021      	streq	r1, [r4, #0]
 80024e0:	e7ed      	b.n	80024be <_free_r+0x22>
 80024e2:	461a      	mov	r2, r3
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	b10b      	cbz	r3, 80024ec <_free_r+0x50>
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	d9fa      	bls.n	80024e2 <_free_r+0x46>
 80024ec:	6811      	ldr	r1, [r2, #0]
 80024ee:	1855      	adds	r5, r2, r1
 80024f0:	42a5      	cmp	r5, r4
 80024f2:	d10b      	bne.n	800250c <_free_r+0x70>
 80024f4:	6824      	ldr	r4, [r4, #0]
 80024f6:	4421      	add	r1, r4
 80024f8:	1854      	adds	r4, r2, r1
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	6011      	str	r1, [r2, #0]
 80024fe:	d1e0      	bne.n	80024c2 <_free_r+0x26>
 8002500:	681c      	ldr	r4, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	6053      	str	r3, [r2, #4]
 8002506:	4421      	add	r1, r4
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	e7da      	b.n	80024c2 <_free_r+0x26>
 800250c:	d902      	bls.n	8002514 <_free_r+0x78>
 800250e:	230c      	movs	r3, #12
 8002510:	6003      	str	r3, [r0, #0]
 8002512:	e7d6      	b.n	80024c2 <_free_r+0x26>
 8002514:	6825      	ldr	r5, [r4, #0]
 8002516:	1961      	adds	r1, r4, r5
 8002518:	428b      	cmp	r3, r1
 800251a:	bf04      	itt	eq
 800251c:	6819      	ldreq	r1, [r3, #0]
 800251e:	685b      	ldreq	r3, [r3, #4]
 8002520:	6063      	str	r3, [r4, #4]
 8002522:	bf04      	itt	eq
 8002524:	1949      	addeq	r1, r1, r5
 8002526:	6021      	streq	r1, [r4, #0]
 8002528:	6054      	str	r4, [r2, #4]
 800252a:	e7ca      	b.n	80024c2 <_free_r+0x26>
 800252c:	b003      	add	sp, #12
 800252e:	bd30      	pop	{r4, r5, pc}
 8002530:	2000009c 	.word	0x2000009c

08002534 <_read_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4d07      	ldr	r5, [pc, #28]	; (8002554 <_read_r+0x20>)
 8002538:	4604      	mov	r4, r0
 800253a:	4608      	mov	r0, r1
 800253c:	4611      	mov	r1, r2
 800253e:	2200      	movs	r2, #0
 8002540:	602a      	str	r2, [r5, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f7fd ff92 	bl	800046c <_read>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_read_r+0x1e>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b103      	cbz	r3, 8002552 <_read_r+0x1e>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	200000a4 	.word	0x200000a4

08002558 <_fstat_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d07      	ldr	r5, [pc, #28]	; (8002578 <_fstat_r+0x20>)
 800255c:	2300      	movs	r3, #0
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	602b      	str	r3, [r5, #0]
 8002566:	f7fd ffaa 	bl	80004be <_fstat>
 800256a:	1c43      	adds	r3, r0, #1
 800256c:	d102      	bne.n	8002574 <_fstat_r+0x1c>
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	b103      	cbz	r3, 8002574 <_fstat_r+0x1c>
 8002572:	6023      	str	r3, [r4, #0]
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	200000a4 	.word	0x200000a4

0800257c <_isatty_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4d06      	ldr	r5, [pc, #24]	; (8002598 <_isatty_r+0x1c>)
 8002580:	2300      	movs	r3, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	f7fd ffa9 	bl	80004de <_isatty>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d102      	bne.n	8002596 <_isatty_r+0x1a>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	b103      	cbz	r3, 8002596 <_isatty_r+0x1a>
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	200000a4 	.word	0x200000a4

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
